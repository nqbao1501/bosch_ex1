
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800563c  0800563c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005644  08005644  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005644  08005644  00006644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005648  08005648  00006648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800564c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00001300  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001360  20001360  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f902  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022bb  00000000  00000000  00016992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00018c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0a  00000000  00000000  00019a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000222d  00000000  00000000  0001a57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010220  00000000  00000000  0001c7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c300b  00000000  00000000  0002c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ef9d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040d0  00000000  00000000  000efa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000f3ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055b0 	.word	0x080055b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080055b0 	.word	0x080055b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <crc8_sae_j1850>:
 */
#include "ex1.h"



uint8_t crc8_sae_j1850(uint8_t *data, uint8_t len){
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	uint8_t idx, crc, temp, temp1, temp2, idy;
	idx = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
	idy = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	733b      	strb	r3, [r7, #12]
	crc = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73bb      	strb	r3, [r7, #14]
	temp = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	72fb      	strb	r3, [r7, #11]
	temp1 = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	737b      	strb	r3, [r7, #13]
	temp2 = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	72bb      	strb	r3, [r7, #10]
	for (idx = 0; idx < len+1; idx++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e02a      	b.n	800061c <crc8_sae_j1850+0x80>
		if (idx == 0) temp1 = 0;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <crc8_sae_j1850+0x36>
 80005cc:	2300      	movs	r3, #0
 80005ce:	737b      	strb	r3, [r7, #13]
 80005d0:	e007      	b.n	80005e2 <crc8_sae_j1850+0x46>
		else temp1 = data[len - idx];
 80005d2:	78fa      	ldrb	r2, [r7, #3]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	737b      	strb	r3, [r7, #13]
	crc ^= temp1;
 80005e2:	7bba      	ldrb	r2, [r7, #14]
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	4053      	eors	r3, r2
 80005e8:	73bb      	strb	r3, [r7, #14]
	for (idy = 8; idy > 0; idy --) {
 80005ea:	2308      	movs	r3, #8
 80005ec:	733b      	strb	r3, [r7, #12]
 80005ee:	e00f      	b.n	8000610 <crc8_sae_j1850+0x74>
		temp2 = crc;
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	72bb      	strb	r3, [r7, #10]
		crc <<= 1;
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	73bb      	strb	r3, [r7, #14]
		if (0!= (temp2 & 128)) crc ^= 0x1D;
 80005fa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	da03      	bge.n	800060a <crc8_sae_j1850+0x6e>
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f083 031d 	eor.w	r3, r3, #29
 8000608:	73bb      	strb	r3, [r7, #14]
	for (idy = 8; idy > 0; idy --) {
 800060a:	7b3b      	ldrb	r3, [r7, #12]
 800060c:	3b01      	subs	r3, #1
 800060e:	733b      	strb	r3, [r7, #12]
 8000610:	7b3b      	ldrb	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1ec      	bne.n	80005f0 <crc8_sae_j1850+0x54>
	for (idx = 0; idx < len+1; idx++) {
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	3301      	adds	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	429a      	cmp	r2, r3
 8000622:	d2d0      	bcs.n	80005c6 <crc8_sae_j1850+0x2a>
	}
	}
	return crc;
 8000624:	7bbb      	ldrb	r3, [r7, #14]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <verify_checksum>:

bool verify_checksum(uint8_t *data){
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	uint8_t calculated_checksum = crc8_sae_j1850(data, 7);
 800063a:	2107      	movs	r1, #7
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffad 	bl	800059c <crc8_sae_j1850>
 8000642:	4603      	mov	r3, r0
 8000644:	73fb      	strb	r3, [r7, #15]
	return (calculated_checksum == data[7]);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3307      	adds	r3, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	429a      	cmp	r2, r3
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	b2db      	uxtb	r3, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <verify_msg_counter>:

bool verify_msg_counter(){
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
    uint8_t expected_counter = (prev_msg_counter + 1) % 16;
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <verify_msg_counter+0x48>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	425a      	negs	r2, r3
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	f002 020f 	and.w	r2, r2, #15
 8000676:	bf58      	it	pl
 8000678:	4253      	negpl	r3, r2
 800067a:	71fb      	strb	r3, [r7, #7]
    if (msg_counter == expected_counter) {
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <verify_msg_counter+0x4c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	79fa      	ldrb	r2, [r7, #7]
 8000682:	429a      	cmp	r2, r3
 8000684:	d105      	bne.n	8000692 <verify_msg_counter+0x32>
        prev_msg_counter = msg_counter;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <verify_msg_counter+0x4c>)
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <verify_msg_counter+0x48>)
 800068c:	701a      	strb	r2, [r3, #0]
        return true;
 800068e:	2301      	movs	r3, #1
 8000690:	e004      	b.n	800069c <verify_msg_counter+0x3c>
    } else {
        // Error: out-of-order, repeated, or skipped message
        prev_msg_counter = msg_counter; // Still update to avoid cascading errors
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <verify_msg_counter+0x4c>)
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <verify_msg_counter+0x48>)
 8000698:	701a      	strb	r2, [r3, #0]
        return false;
 800069a:	2300      	movs	r3, #0
    }
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	20001201 	.word	0x20001201
 80006ac:	20001200 	.word	0x20001200

080006b0 <CAN2_prep_data_tx>:

void CAN2_prep_data_tx(uint8_t value1, uint8_t value2){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	CAN2_DATA_TX[0] = value1;
 80006c0:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <CAN2_prep_data_tx+0x3c>)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	7013      	strb	r3, [r2, #0]
	CAN2_DATA_TX[1] = value2;
 80006c6:	4a09      	ldr	r2, [pc, #36]	@ (80006ec <CAN2_prep_data_tx+0x3c>)
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	7053      	strb	r3, [r2, #1]
	CAN2_DATA_TX[6] = msg_counter;
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <CAN2_prep_data_tx+0x40>)
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <CAN2_prep_data_tx+0x3c>)
 80006d2:	719a      	strb	r2, [r3, #6]
	CAN2_DATA_TX[7] = crc8_sae_j1850(CAN2_DATA_TX, 7);
 80006d4:	2107      	movs	r1, #7
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <CAN2_prep_data_tx+0x3c>)
 80006d8:	f7ff ff60 	bl	800059c <crc8_sae_j1850>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b02      	ldr	r3, [pc, #8]	@ (80006ec <CAN2_prep_data_tx+0x3c>)
 80006e2:	71da      	strb	r2, [r3, #7]
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200011f0 	.word	0x200011f0
 80006f0:	20001200 	.word	0x20001200

080006f4 <CAN1_prep_data_tx>:

void CAN1_prep_data_tx(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	CAN1_DATA_TX[0] = CAN1_DATA_RX[0];
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <CAN1_prep_data_tx+0x5c>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 80006fe:	701a      	strb	r2, [r3, #0]
	CAN1_DATA_TX[1] = CAN1_DATA_RX[1];
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <CAN1_prep_data_tx+0x5c>)
 8000702:	785a      	ldrb	r2, [r3, #1]
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 8000706:	705a      	strb	r2, [r3, #1]
	CAN1_DATA_TX[2] = CAN1_DATA_RX[0] + CAN1_DATA_RX[1];
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <CAN1_prep_data_tx+0x5c>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <CAN1_prep_data_tx+0x5c>)
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	4413      	add	r3, r2
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 8000716:	709a      	strb	r2, [r3, #2]
	CAN1_DATA_TX[6] = msg_counter ;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <CAN1_prep_data_tx+0x64>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 800071e:	719a      	strb	r2, [r3, #6]

	//Thêm phần nếu ấn nút thì checksum ở đây sẽ thành sai.
	if (falsesum) CAN1_DATA_TX[7] = crc8_sae_j1850(CAN1_DATA_TX, 7)+1;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <CAN1_prep_data_tx+0x68>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d009      	beq.n	800073c <CAN1_prep_data_tx+0x48>
 8000728:	2107      	movs	r1, #7
 800072a:	480a      	ldr	r0, [pc, #40]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 800072c:	f7ff ff36 	bl	800059c <crc8_sae_j1850>
 8000730:	4603      	mov	r3, r0
 8000732:	3301      	adds	r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 8000738:	71da      	strb	r2, [r3, #7]
	else CAN1_DATA_TX[7] = crc8_sae_j1850(CAN1_DATA_TX, 7);
}
 800073a:	e007      	b.n	800074c <CAN1_prep_data_tx+0x58>
	else CAN1_DATA_TX[7] = crc8_sae_j1850(CAN1_DATA_TX, 7);
 800073c:	2107      	movs	r1, #7
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 8000740:	f7ff ff2c 	bl	800059c <crc8_sae_j1850>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b02      	ldr	r3, [pc, #8]	@ (8000754 <CAN1_prep_data_tx+0x60>)
 800074a:	71da      	strb	r2, [r3, #7]
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200011e8 	.word	0x200011e8
 8000754:	200011e0 	.word	0x200011e0
 8000758:	20001200 	.word	0x20001200
 800075c:	20001208 	.word	0x20001208

08000760 <CAN2_SendMessage>:

void CAN2_SendMessage(uint8_t* data)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;
	//Cập nhật msg_counter
	msg_counter ++;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <CAN2_SendMessage+0x38>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <CAN2_SendMessage+0x38>)
 8000772:	701a      	strb	r2, [r3, #0]
	msg_counter = msg_counter & 0x0F;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <CAN2_SendMessage+0x38>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <CAN2_SendMessage+0x38>)
 8000780:	701a      	strb	r2, [r3, #0]
	//Gửi dữ liệu header + CAN2_DATA_TX
	HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &txMailbox);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <CAN2_SendMessage+0x3c>)
 8000788:	4905      	ldr	r1, [pc, #20]	@ (80007a0 <CAN2_SendMessage+0x40>)
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <CAN2_SendMessage+0x44>)
 800078c:	f001 f99a 	bl	8001ac4 <HAL_CAN_AddTxMessage>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20001200 	.word	0x20001200
 800079c:	200011f0 	.word	0x200011f0
 80007a0:	20000198 	.word	0x20000198
 80007a4:	200000a4 	.word	0x200000a4

080007a8 <CAN1_SendMessage>:

void CAN1_SendMessage(uint8_t* data)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;
	//Cập nhật msg_counter
	msg_counter ++;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <CAN1_SendMessage+0x38>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <CAN1_SendMessage+0x38>)
 80007ba:	701a      	strb	r2, [r3, #0]
	msg_counter = msg_counter & 0x0F;
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <CAN1_SendMessage+0x38>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <CAN1_SendMessage+0x38>)
 80007c8:	701a      	strb	r2, [r3, #0]

	//Gửi dữ liệu header + CAN1_DATA_TX
	HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &txMailbox);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <CAN1_SendMessage+0x3c>)
 80007d0:	4905      	ldr	r1, [pc, #20]	@ (80007e8 <CAN1_SendMessage+0x40>)
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <CAN1_SendMessage+0x44>)
 80007d4:	f001 f976 	bl	8001ac4 <HAL_CAN_AddTxMessage>

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20001200 	.word	0x20001200
 80007e4:	200011e0 	.word	0x200011e0
 80007e8:	20000158 	.word	0x20000158
 80007ec:	2000007c 	.word	0x2000007c

080007f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Đây là callback, chạy sau khi node 1 hoặc node 2 nhận dữ liệu
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	f107 0210 	add.w	r2, r7, #16
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f001 fa39 	bl	8001c7a <HAL_CAN_GetRxMessage>
    if (hcan->Instance == CAN1) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a23      	ldr	r2, [pc, #140]	@ (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d11d      	bne.n	800084e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
        if (currentState == STATE_CAN2_TRANSMISSION){
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d119      	bne.n	800084e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
        	for (uint8_t i = 0; i < 8; i++){
 800081a:	2300      	movs	r3, #0
 800081c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000820:	e00e      	b.n	8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
        		CAN1_DATA_RX[i] = rxData[i];
 8000822:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000826:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800082a:	3230      	adds	r2, #48	@ 0x30
 800082c:	443a      	add	r2, r7
 800082e:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000832:	4a1c      	ldr	r2, [pc, #112]	@ (80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000834:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < 8; i++){
 8000836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800083a:	3301      	adds	r3, #1
 800083c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000840:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000844:	2b07      	cmp	r3, #7
 8000846:	d9ec      	bls.n	8000822 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
        	}
        	currentState = STATE_READING_CAN1_RECEPTION;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800084a:	2203      	movs	r2, #3
 800084c:	701a      	strb	r2, [r3, #0]
        }
    }
    if (hcan->Instance == CAN2) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d11d      	bne.n	8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
        if (currentState == STATE_CAN1_TRANSMISSION){
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b05      	cmp	r3, #5
 800085e:	d119      	bne.n	8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
        	for (uint8_t i = 0; i < 8; i++){
 8000860:	2300      	movs	r3, #0
 8000862:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000866:	e00e      	b.n	8000886 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
        		CAN2_DATA_RX[i] = rxData[i];
 8000868:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800086c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000870:	3230      	adds	r2, #48	@ 0x30
 8000872:	443a      	add	r2, r7
 8000874:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800087a:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < 8; i++){
 800087c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000880:	3301      	adds	r3, #1
 8000882:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9ec      	bls.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
        	}
        	currentState = STATE_READING_CAN2_RECEPTION;
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000890:	2206      	movs	r2, #6
 8000892:	701a      	strb	r2, [r3, #0]
        }

    }
}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	@ 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40006400 	.word	0x40006400
 80008a0:	20000000 	.word	0x20000000
 80008a4:	200011e8 	.word	0x200011e8
 80008a8:	40006800 	.word	0x40006800
 80008ac:	200011f8 	.word	0x200011f8

080008b0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>
    {
        if (currentState == STATE_IDLE) currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
    }
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40010000 	.word	0x40010000
 80008e0:	20000000 	.word	0x20000000

080008e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d10a      	bne.n	800090a <HAL_GPIO_EXTI_Callback+0x26>
    {
    	if (falsesum) falsesum = false;
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x34>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d003      	beq.n	8000904 <HAL_GPIO_EXTI_Callback+0x20>
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x34>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
    	else falsesum = true;

    }
}
 8000902:	e002      	b.n	800090a <HAL_GPIO_EXTI_Callback+0x26>
    	else falsesum = true;
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x34>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20001208 	.word	0x20001208

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	80fb      	strh	r3, [r7, #6]
	uint16_t Consecutive_Cntr = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fe15 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f8dd 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 fa71 	bl	8000e18 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000936:	f000 f943 	bl	8000bc0 <MX_CAN1_Init>
  MX_CAN2_Init();
 800093a:	f000 f99b 	bl	8000c74 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 800093e:	f000 fa41 	bl	8000dc4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000942:	f000 f9ed 	bl	8000d20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000946:	f000 fae3 	bl	8000f10 <MX_CAN1_Setup>
  MX_CAN2_Setup();
 800094a:	f000 fb05 	bl	8000f58 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800094e:	4b59      	ldr	r3, [pc, #356]	@ (8000ab4 <main+0x198>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68da      	ldr	r2, [r3, #12]
 8000954:	4b57      	ldr	r3, [pc, #348]	@ (8000ab4 <main+0x198>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f042 0220 	orr.w	r2, r2, #32
 800095c:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(!BtnU) /*IG OFF->ON stimulation*/
 800095e:	2102      	movs	r1, #2
 8000960:	4855      	ldr	r0, [pc, #340]	@ (8000ab8 <main+0x19c>)
 8000962:	f002 f831 	bl	80029c8 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d117      	bne.n	800099c <main+0x80>
	{
	  delay(20);
 800096c:	2014      	movs	r0, #20
 800096e:	f000 fbb5 	bl	80010dc <delay>
	  USART3_SendString((uint8_t *)"IG OFF ");
 8000972:	4852      	ldr	r0, [pc, #328]	@ (8000abc <main+0x1a0>)
 8000974:	f000 fb14 	bl	8000fa0 <USART3_SendString>
	  while(!BtnU);
 8000978:	bf00      	nop
 800097a:	2102      	movs	r1, #2
 800097c:	484e      	ldr	r0, [pc, #312]	@ (8000ab8 <main+0x19c>)
 800097e:	f002 f823 	bl	80029c8 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0f8      	beq.n	800097a <main+0x5e>
	  MX_CAN1_Setup();
 8000988:	f000 fac2 	bl	8000f10 <MX_CAN1_Setup>
	  MX_CAN2_Setup();
 800098c:	f000 fae4 	bl	8000f58 <MX_CAN2_Setup>
	  USART3_SendString((uint8_t *)"-> IG ON \n");
 8000990:	484b      	ldr	r0, [pc, #300]	@ (8000ac0 <main+0x1a4>)
 8000992:	f000 fb05 	bl	8000fa0 <USART3_SendString>
	  delay(20);
 8000996:	2014      	movs	r0, #20
 8000998:	f000 fba0 	bl	80010dc <delay>
	}
	switch (currentState){
 800099c:	4b49      	ldr	r3, [pc, #292]	@ (8000ac4 <main+0x1a8>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d8dc      	bhi.n	800095e <main+0x42>
 80009a4:	a201      	add	r2, pc, #4	@ (adr r2, 80009ac <main+0x90>)
 80009a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009aa:	bf00      	nop
 80009ac:	0800095f 	.word	0x0800095f
 80009b0:	080009cd 	.word	0x080009cd
 80009b4:	0800095f 	.word	0x0800095f
 80009b8:	080009f7 	.word	0x080009f7
 80009bc:	08000a29 	.word	0x08000a29
 80009c0:	0800095f 	.word	0x0800095f
 80009c4:	08000a49 	.word	0x08000a49
 80009c8:	08000a83 	.word	0x08000a83
		case STATE_IDLE:
			break;

		case STATE_PREPARING_FOR_CAN2_TRANSMISSION:
			currentState = STATE_CAN2_TRANSMISSION;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <main+0x1a8>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	701a      	strb	r2, [r3, #0]
			CAN2_prep_data_tx(3,7);
 80009d2:	2107      	movs	r1, #7
 80009d4:	2003      	movs	r0, #3
 80009d6:	f7ff fe6b 	bl	80006b0 <CAN2_prep_data_tx>
			CAN2_SendMessage(CAN2_DATA_TX);
 80009da:	483b      	ldr	r0, [pc, #236]	@ (8000ac8 <main+0x1ac>)
 80009dc:	f7ff fec0 	bl	8000760 <CAN2_SendMessage>
			PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 80009e0:	4b3a      	ldr	r3, [pc, #232]	@ (8000acc <main+0x1b0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4938      	ldr	r1, [pc, #224]	@ (8000ac8 <main+0x1ac>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 faf3 	bl	8000fd4 <PrintCANLog>
			HAL_TIM_Base_Start_IT(&htim1);
 80009ee:	4838      	ldr	r0, [pc, #224]	@ (8000ad0 <main+0x1b4>)
 80009f0:	f002 fd02 	bl	80033f8 <HAL_TIM_Base_Start_IT>
			break;
 80009f4:	e05c      	b.n	8000ab0 <main+0x194>
			break;

		case STATE_READING_CAN1_RECEPTION:
			//verify msg_counter

			if (!(verify_msg_counter()) ||  !(verify_checksum(CAN1_DATA_RX))){
 80009f6:	f7ff fe33 	bl	8000660 <verify_msg_counter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f083 0301 	eor.w	r3, r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d108      	bne.n	8000a18 <main+0xfc>
 8000a06:	4833      	ldr	r0, [pc, #204]	@ (8000ad4 <main+0x1b8>)
 8000a08:	f7ff fe13 	bl	8000632 <verify_checksum>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f083 0301 	eor.w	r3, r3, #1
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <main+0x104>
				currentState = STATE_IDLE;
 8000a18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <main+0x1a8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
				//Print RX data to terminal
				//PrintCANLog(CAN1_pHeaderRx.StdId, CAN1_DATA_RX);
				//PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
				currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
			}
			break;
 8000a1e:	e047      	b.n	8000ab0 <main+0x194>
				currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 8000a20:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <main+0x1a8>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	701a      	strb	r2, [r3, #0]
			break;
 8000a26:	e043      	b.n	8000ab0 <main+0x194>

		case STATE_PREPARING_FOR_CAN1_TRANSMISSION:
			CAN1_prep_data_tx();
 8000a28:	f7ff fe64 	bl	80006f4 <CAN1_prep_data_tx>
			currentState = STATE_CAN1_TRANSMISSION;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <main+0x1a8>)
 8000a2e:	2205      	movs	r2, #5
 8000a30:	701a      	strb	r2, [r3, #0]
			CAN1_SendMessage(CAN1_DATA_TX);
 8000a32:	4829      	ldr	r0, [pc, #164]	@ (8000ad8 <main+0x1bc>)
 8000a34:	f7ff feb8 	bl	80007a8 <CAN1_SendMessage>
			//Print TX data to terminal
			PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8000a38:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <main+0x1c0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4926      	ldr	r1, [pc, #152]	@ (8000ad8 <main+0x1bc>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fac7 	bl	8000fd4 <PrintCANLog>
			break;
 8000a46:	e033      	b.n	8000ab0 <main+0x194>
		case STATE_CAN1_TRANSMISSION:
			break;

		case STATE_READING_CAN2_RECEPTION:
			//Check if checksum is correct or not
			if (!verify_checksum(CAN2_DATA_RX)) {
 8000a48:	4825      	ldr	r0, [pc, #148]	@ (8000ae0 <main+0x1c4>)
 8000a4a:	f7ff fdf2 	bl	8000632 <verify_checksum>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <main+0x146>
				currentState = STATE_ERROR;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <main+0x1a8>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	701a      	strb	r2, [r3, #0]
			else {
				//Print RX Data to terminal
				//PrintCANLog(CAN2_pHeaderRx.StdId, CAN2_DATA_RX);
				currentState = STATE_IDLE;
			}
			break;
 8000a60:	e026      	b.n	8000ab0 <main+0x194>
			else if (!verify_msg_counter()) {
 8000a62:	f7ff fdfd 	bl	8000660 <verify_msg_counter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f083 0301 	eor.w	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <main+0x15e>
				currentState = STATE_IDLE;
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <main+0x1a8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			break;
 8000a78:	e01a      	b.n	8000ab0 <main+0x194>
				currentState = STATE_IDLE;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <main+0x1a8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			break;
 8000a80:	e016      	b.n	8000ab0 <main+0x194>
		case STATE_ERROR:
			currentState = STATE_IDLE;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <main+0x1a8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
			CAN2_prep_data_tx(0, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fe10 	bl	80006b0 <CAN2_prep_data_tx>
			CAN2_SendMessage(CAN2_DATA_TX);
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <main+0x1ac>)
 8000a92:	f7ff fe65 	bl	8000760 <CAN2_SendMessage>
			prev_msg_counter = msg_counter;
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <main+0x1c8>)
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <main+0x1cc>)
 8000a9c:	701a      	strb	r2, [r3, #0]

			PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <main+0x1b0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4908      	ldr	r1, [pc, #32]	@ (8000ac8 <main+0x1ac>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fa94 	bl	8000fd4 <PrintCANLog>
			break;
 8000aac:	bf00      	nop
 8000aae:	e756      	b.n	800095e <main+0x42>
	if(!BtnU) /*IG OFF->ON stimulation*/
 8000ab0:	e755      	b.n	800095e <main+0x42>
 8000ab2:	bf00      	nop
 8000ab4:	20000114 	.word	0x20000114
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	080055c8 	.word	0x080055c8
 8000ac0:	080055d0 	.word	0x080055d0
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	200011f0 	.word	0x200011f0
 8000acc:	20000198 	.word	0x20000198
 8000ad0:	200000cc 	.word	0x200000cc
 8000ad4:	200011e8 	.word	0x200011e8
 8000ad8:	200011e0 	.word	0x200011e0
 8000adc:	20000158 	.word	0x20000158
 8000ae0:	200011f8 	.word	0x200011f8
 8000ae4:	20001200 	.word	0x20001200
 8000ae8:	20001201 	.word	0x20001201

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	@ 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	@ 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 f8da 	bl	8004cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	@ (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <SystemClock_Config+0xd0>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b50:	2310      	movs	r3, #16
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000b60:	2350      	movs	r3, #80	@ 0x50
 8000b62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 ff59 	bl	8002a28 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b7c:	f000 fabb 	bl	80010f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f9ba 	bl	8002f18 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000baa:	f000 faa4 	bl	80010f6 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	@ 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bc6:	4a29      	ldr	r2, [pc, #164]	@ (8000c6c <MX_CAN1_Init+0xac>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000bca:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bcc:	2205      	movs	r2, #5
 8000bce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000bdc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000bde:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000be0:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000be4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000be6:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000be8:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000bec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c12:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <MX_CAN1_Init+0xa8>)
 8000c14:	f000 fd36 	bl	8001684 <HAL_CAN_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000c1e:	f000 fa6a 	bl	80010f6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c24:	220e      	movs	r2, #14
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24
	CAN1_sFilterConfig.FilterBank = 0;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c3c:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8000c40:	601a      	str	r2, [r3, #0]
	CAN1_sFilterConfig.FilterIdLow = 0x0000;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c4a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000c4e:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterActivation = ENABLE;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <MX_CAN1_Init+0xb0>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	621a      	str	r2, [r3, #32]
  /* USER CODE END CAN1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000007c 	.word	0x2000007c
 8000c6c:	40006400 	.word	0x40006400
 8000c70:	20000170 	.word	0x20000170

08000c74 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c78:	4b26      	ldr	r3, [pc, #152]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000c7a:	4a27      	ldr	r2, [pc, #156]	@ (8000d18 <MX_CAN2_Init+0xa4>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000c80:	2205      	movs	r2, #5
 8000c82:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c84:	4b23      	ldr	r3, [pc, #140]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000c8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c90:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000c94:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000c98:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000c9c:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ca0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000cc6:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <MX_CAN2_Init+0xa0>)
 8000cc8:	f000 fcdc 	bl	8001684 <HAL_CAN_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000cd2:	f000 fa10 	bl	80010f6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	//Cần config các setting của filter ở đây
	CAN2_sFilterConfig.FilterBank = 14;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000cd8:	220e      	movs	r2, #14
 8000cda:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	61da      	str	r2, [r3, #28]
	CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000cea:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000cee:	601a      	str	r2, [r3, #0]
	CAN2_sFilterConfig.FilterIdLow = 0x0000;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000cf8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000cfc:	609a      	str	r2, [r3, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterActivation = ENABLE;
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <MX_CAN2_Init+0xa8>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	621a      	str	r2, [r3, #32]

  /* USER CODE END CAN2_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000a4 	.word	0x200000a4
 8000d18:	40006800 	.word	0x40006800
 8000d1c:	200001b0 	.word	0x200001b0

08000d20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <MX_TIM1_Init+0xa0>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (800-1);
 8000d42:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d44:	f240 321f 	movw	r2, #799	@ 0x31f
 8000d48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (5000-1);
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d52:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d6a:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d6c:	f002 faf4 	bl	8003358 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d76:	f000 f9be 	bl	80010f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000d88:	f002 fcae 	bl	80036e8 <HAL_TIM_ConfigClockSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d92:	f000 f9b0 	bl	80010f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_TIM1_Init+0x9c>)
 8000da4:	f002 feca 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dae:	f000 f9a2 	bl	80010f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000cc 	.word	0x200000cc
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <MX_USART3_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000df6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dfa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	f002 ff2d 	bl	8003c5c <HAL_UART_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000e08:	f000 f975 	bl	80010f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000114 	.word	0x20000114
 8000e14:	40004800 	.word	0x40004800

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b34      	ldr	r3, [pc, #208]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a33      	ldr	r2, [pc, #204]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b31      	ldr	r3, [pc, #196]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a25      	ldr	r2, [pc, #148]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_GPIO_Init+0xec>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000e9e:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 8000ea2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4815      	ldr	r0, [pc, #84]	@ (8000f08 <MX_GPIO_Init+0xf0>)
 8000eb4:	f001 fbec 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ebc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <MX_GPIO_Init+0xf4>)
 8000ece:	f001 fbdf 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_GPIO_Init+0xf4>)
 8000ee6:	f001 fbd3 	bl	8002690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	2006      	movs	r0, #6
 8000ef0:	f001 fb05 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ef4:	2006      	movs	r0, #6
 8000ef6:	f001 fb1e 	bl	8002536 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	@ 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000f14:	490d      	ldr	r1, [pc, #52]	@ (8000f4c <MX_CAN1_Setup+0x3c>)
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <MX_CAN1_Setup+0x40>)
 8000f18:	f000 fcb0 	bl	800187c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <MX_CAN1_Setup+0x40>)
 8000f1e:	f000 fd8d 	bl	8001a3c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f22:	2102      	movs	r1, #2
 8000f24:	480a      	ldr	r0, [pc, #40]	@ (8000f50 <MX_CAN1_Setup+0x40>)
 8000f26:	f000 ffba 	bl	8001e9e <HAL_CAN_ActivateNotification>

	//Cần config header của CAN1
    CAN1_pHeader.StdId = 0x012;                   // Set TX message ID
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <MX_CAN1_Setup+0x44>)
 8000f2c:	2212      	movs	r2, #18
 8000f2e:	601a      	str	r2, [r3, #0]
    CAN1_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_CAN1_Setup+0x44>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    CAN1_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <MX_CAN1_Setup+0x44>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    CAN1_pHeader.DLC = 8;                         // 8 bytes of data
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <MX_CAN1_Setup+0x44>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	611a      	str	r2, [r3, #16]
    CAN1_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <MX_CAN1_Setup+0x44>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	751a      	strb	r2, [r3, #20]
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000170 	.word	0x20000170
 8000f50:	2000007c 	.word	0x2000007c
 8000f54:	20000158 	.word	0x20000158

08000f58 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000f5c:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <MX_CAN2_Setup+0x3c>)
 8000f5e:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <MX_CAN2_Setup+0x40>)
 8000f60:	f000 fc8c 	bl	800187c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <MX_CAN2_Setup+0x40>)
 8000f66:	f000 fd69 	bl	8001a3c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	480a      	ldr	r0, [pc, #40]	@ (8000f98 <MX_CAN2_Setup+0x40>)
 8000f6e:	f000 ff96 	bl	8001e9e <HAL_CAN_ActivateNotification>

	//Cần config header của CAN2
    CAN2_pHeader.StdId = 0x0A2;                   // Set TX message ID
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <MX_CAN2_Setup+0x44>)
 8000f74:	22a2      	movs	r2, #162	@ 0xa2
 8000f76:	601a      	str	r2, [r3, #0]
    CAN2_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <MX_CAN2_Setup+0x44>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    CAN2_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <MX_CAN2_Setup+0x44>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    CAN2_pHeader.DLC = 8;                         // 8 bytes of data
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <MX_CAN2_Setup+0x44>)
 8000f86:	2208      	movs	r2, #8
 8000f88:	611a      	str	r2, [r3, #16]
    CAN2_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 8000f8a:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <MX_CAN2_Setup+0x44>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	751a      	strb	r2, [r3, #20]
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001b0 	.word	0x200001b0
 8000f98:	200000a4 	.word	0x200000a4
 8000f9c:	20000198 	.word	0x20000198

08000fa0 <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 8000fa8:	e009      	b.n	8000fbe <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	2201      	movs	r2, #1
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <USART3_SendString+0x30>)
 8000fb4:	f002 fe9f 	bl	8003cf6 <HAL_UART_Transmit>
      ch++;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f1      	bne.n	8000faa <USART3_SendString+0xa>
   }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000114 	.word	0x20000114

08000fd4 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t *CAN_Frame)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	@ 0x50
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	80fb      	strh	r3, [r7, #6]
    char bufsend[64];  // Safe enough size
    uint16_t i = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    // Format timestamp
    int len = sprintf(bufsend, "%d ", TimeStamp);
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <PrintCANLog+0xbc>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4929      	ldr	r1, [pc, #164]	@ (8001094 <PrintCANLog+0xc0>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fe3d 	bl	8004c70 <siprintf>
 8000ff6:	64b8      	str	r0, [r7, #72]	@ 0x48

    // Format CAN ID (always 3 digits, uppercase hex)
    len += sprintf(bufsend + len, "%03X: ", CANID & 0x7FF);  // mask to 11 bits
 8000ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	18d0      	adds	r0, r2, r3
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001006:	461a      	mov	r2, r3
 8001008:	4923      	ldr	r1, [pc, #140]	@ (8001098 <PrintCANLog+0xc4>)
 800100a:	f003 fe31 	bl	8004c70 <siprintf>
 800100e:	4602      	mov	r2, r0
 8001010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001012:	4413      	add	r3, r2
 8001014:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Format 8 bytes of CAN data
    for (i = 0; i < 8; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800101c:	e015      	b.n	800104a <PrintCANLog+0x76>
        len += sprintf(bufsend + len, "%02X ", CAN_Frame[i]);
 800101e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001020:	f107 0208 	add.w	r2, r7, #8
 8001024:	18d0      	adds	r0, r2, r3
 8001026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	491a      	ldr	r1, [pc, #104]	@ (800109c <PrintCANLog+0xc8>)
 8001034:	f003 fe1c 	bl	8004c70 <siprintf>
 8001038:	4602      	mov	r2, r0
 800103a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800103c:	4413      	add	r3, r2
 800103e:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (i = 0; i < 8; i++) {
 8001040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001044:	3301      	adds	r3, #1
 8001046:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800104a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800104e:	2b07      	cmp	r3, #7
 8001050:	d9e5      	bls.n	800101e <PrintCANLog+0x4a>
    }

    // End with CRLF
    bufsend[len++] = '\r';
 8001052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001058:	3350      	adds	r3, #80	@ 0x50
 800105a:	443b      	add	r3, r7
 800105c:	220d      	movs	r2, #13
 800105e:	f803 2c48 	strb.w	r2, [r3, #-72]
    bufsend[len++] = '\n';
 8001062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001068:	3350      	adds	r3, #80	@ 0x50
 800106a:	443b      	add	r3, r7
 800106c:	220a      	movs	r2, #10
 800106e:	f803 2c48 	strb.w	r2, [r3, #-72]
    bufsend[len] = '\0';
 8001072:	f107 0208 	add.w	r2, r7, #8
 8001076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001078:	4413      	add	r3, r2
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]

    // Send over UART
    USART3_SendString((uint8_t *)bufsend);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff8c 	bl	8000fa0 <USART3_SendString>
}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	@ 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20001204 	.word	0x20001204
 8001094:	080055dc 	.word	0x080055dc
 8001098:	080055e0 	.word	0x080055e0
 800109c:	080055e8 	.word	0x080055e8

080010a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_UART_RxCpltCallback+0x30>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_UART_RxCpltCallback+0x34>)
 80010b0:	7819      	ldrb	r1, [r3, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_UART_RxCpltCallback+0x38>)
 80010b4:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_UART_RxCpltCallback+0x30>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <HAL_UART_RxCpltCallback+0x30>)
 80010c0:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200001d8 	.word	0x200001d8
 80010d4:	200011dc 	.word	0x200011dc
 80010d8:	200001dc 	.word	0x200001dc

080010dc <delay>:
void delay(uint16_t delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 faa7 	bl	800163c <HAL_Delay>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fa:	b672      	cpsid	i
}
 80010fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fe:	bf00      	nop
 8001100:	e7fd      	b.n	80010fe <Error_Handler+0x8>
	...

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_MspInit+0x4c>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_MspInit+0x4c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	@ 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a4a      	ldr	r2, [pc, #296]	@ (800129c <HAL_CAN_MspInit+0x148>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d13e      	bne.n	80011f4 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001176:	4b4a      	ldr	r3, [pc, #296]	@ (80012a0 <HAL_CAN_MspInit+0x14c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a48      	ldr	r2, [pc, #288]	@ (80012a0 <HAL_CAN_MspInit+0x14c>)
 800117e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001180:	4b47      	ldr	r3, [pc, #284]	@ (80012a0 <HAL_CAN_MspInit+0x14c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10d      	bne.n	80011a4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	4b45      	ldr	r3, [pc, #276]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a44      	ldr	r2, [pc, #272]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b42      	ldr	r3, [pc, #264]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	4b3e      	ldr	r3, [pc, #248]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	4a3d      	ldr	r2, [pc, #244]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b4:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011d2:	2309      	movs	r3, #9
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4832      	ldr	r0, [pc, #200]	@ (80012a8 <HAL_CAN_MspInit+0x154>)
 80011de:	f001 fa57 	bl	8002690 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	2014      	movs	r0, #20
 80011e8:	f001 f989 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011ec:	2014      	movs	r0, #20
 80011ee:	f001 f9a2 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80011f2:	e04f      	b.n	8001294 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2c      	ldr	r2, [pc, #176]	@ (80012ac <HAL_CAN_MspInit+0x158>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d14a      	bne.n	8001294 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a27      	ldr	r2, [pc, #156]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001208:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800121a:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <HAL_CAN_MspInit+0x14c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <HAL_CAN_MspInit+0x14c>)
 8001222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001224:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <HAL_CAN_MspInit+0x14c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10d      	bne.n	8001248 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001236:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800123a:	6413      	str	r3, [r2, #64]	@ 0x40
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	6313      	str	r3, [r2, #48]	@ 0x30
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_CAN_MspInit+0x150>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001264:	2360      	movs	r3, #96	@ 0x60
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001274:	2309      	movs	r3, #9
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <HAL_CAN_MspInit+0x15c>)
 8001280:	f001 fa06 	bl	8002690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	2040      	movs	r0, #64	@ 0x40
 800128a:	f001 f938 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800128e:	2040      	movs	r0, #64	@ 0x40
 8001290:	f001 f951 	bl	8002536 <HAL_NVIC_EnableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3730      	adds	r7, #48	@ 0x30
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40006400 	.word	0x40006400
 80012a0:	2000120c 	.word	0x2000120c
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40006800 	.word	0x40006800
 80012b0:	40020400 	.word	0x40020400

080012b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d115      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_TIM_Base_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_TIM_Base_MspInit+0x4c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_TIM_Base_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2103      	movs	r1, #3
 80012e6:	2019      	movs	r0, #25
 80012e8:	f001 f909 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012ec:	2019      	movs	r0, #25
 80012ee:	f001 f922 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40010000 	.word	0x40010000
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_UART_MspInit+0x94>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d134      	bne.n	8001390 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <HAL_UART_MspInit+0x98>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a14      	ldr	r2, [pc, #80]	@ (800139c <HAL_UART_MspInit+0x98>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800135e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001370:	2307      	movs	r3, #7
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <HAL_UART_MspInit+0x9c>)
 800137c:	f001 f988 	bl	8002690 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	2027      	movs	r0, #39	@ 0x27
 8001386:	f001 f8ba 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800138a:	2027      	movs	r0, #39	@ 0x27
 800138c:	f001 f8d3 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40004800 	.word	0x40004800
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020800 	.word	0x40020800

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <NMI_Handler+0x4>

080013ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <MemManage_Handler+0x4>

080013bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <UsageFault_Handler+0x4>

080013cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f8fe 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <SysTick_Handler+0x18>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a02      	ldr	r2, [pc, #8]	@ (8001410 <SysTick_Handler+0x18>)
 8001408:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20001204 	.word	0x20001204

08001414 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001418:	2001      	movs	r0, #1
 800141a:	f001 faed 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <CAN1_RX0_IRQHandler+0x10>)
 800142a:	f000 fd5e 	bl	8001eea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000007c 	.word	0x2000007c

08001438 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800143e:	f002 f84b 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000cc 	.word	0x200000cc

0800144c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <USART3_IRQHandler+0x10>)
 8001452:	f002 fce3 	bl	8003e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000114 	.word	0x20000114

08001460 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <CAN2_RX0_IRQHandler+0x10>)
 8001466:	f000 fd40 	bl	8001eea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000a4 	.word	0x200000a4

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f003 fc0e 	bl	8004cc4 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20001210 	.word	0x20001210
 80014dc:	20001360 	.word	0x20001360

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150a:	490e      	ldr	r1, [pc, #56]	@ (8001544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800150c:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001520:	4c0b      	ldr	r4, [pc, #44]	@ (8001550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152e:	f7ff ffd7 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f003 fbcd 	bl	8004cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff f9f1 	bl	800091c <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001548:	0800564c 	.word	0x0800564c
  ldr r2, =_sbss
 800154c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001550:	20001360 	.word	0x20001360

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 ffb1 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fdba 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 ffc9 	bl	8002552 <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 ff91 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000004 	.word	0x20000004
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	20000008 	.word	0x20000008

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000000c 	.word	0x2000000c
 8001620:	20001214 	.word	0x20001214

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20001214 	.word	0x20001214

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000000c 	.word	0x2000000c

08001684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0ed      	b.n	8001872 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fd56 	bl	8001154 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff ffb4 	bl	8001624 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff ffb0 	bl	8001624 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0c5      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0e5      	beq.n	80016c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0202 	bic.w	r2, r2, #2
 8001702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff ff8e 	bl	8001624 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff ff8a 	bl	8001624 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e09f      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e5      	bne.n	800170c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e007      	b.n	800176a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e5b      	ldrb	r3, [r3, #25]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e007      	b.n	8001794 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0220 	bic.w	r2, r2, #32
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7edb      	ldrb	r3, [r3, #27]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0210 	bic.w	r2, r2, #16
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0210 	orr.w	r2, r2, #16
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7f1b      	ldrb	r3, [r3, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7f5b      	ldrb	r3, [r3, #29]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0204 	orr.w	r2, r2, #4
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <HAL_CAN_ConfigFilter+0x26>
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	2b02      	cmp	r3, #2
 800189e:	f040 80be 	bne.w	8001a1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018a2:	4b65      	ldr	r3, [pc, #404]	@ (8001a38 <HAL_CAN_ConfigFilter+0x1bc>)
 80018a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018bc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2201      	movs	r2, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	401a      	ands	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d123      	bne.n	800194c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001926:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3248      	adds	r2, #72	@ 0x48
 800192c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001940:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001942:	6979      	ldr	r1, [r7, #20]
 8001944:	3348      	adds	r3, #72	@ 0x48
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d122      	bne.n	800199a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001974:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3248      	adds	r2, #72	@ 0x48
 800197a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800198e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001990:	6979      	ldr	r1, [r7, #20]
 8001992:	3348      	adds	r3, #72	@ 0x48
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019b4:	e007      	b.n	80019c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	431a      	orrs	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	401a      	ands	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a10:	f023 0201 	bic.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e006      	b.n	8001a2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
  }
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40006400 	.word	0x40006400

08001a3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d12e      	bne.n	8001aae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a68:	f7ff fddc 	bl	8001624 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a6e:	e012      	b.n	8001a96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a70:	f7ff fdd8 	bl	8001624 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	d90b      	bls.n	8001a96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e012      	b.n	8001abc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e5      	bne.n	8001a70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e006      	b.n	8001abc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d003      	beq.n	8001af0 <HAL_CAN_AddTxMessage+0x2c>
 8001ae8:	7ffb      	ldrb	r3, [r7, #31]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	f040 80b8 	bne.w	8001c60 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80a0 	beq.w	8001c50 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	0e1b      	lsrs	r3, r3, #24
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e09e      	b.n	8001c6e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b30:	2201      	movs	r2, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	409a      	lsls	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	6809      	ldr	r1, [r1, #0]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3318      	adds	r3, #24
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e00f      	b.n	8001b7e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3318      	adds	r3, #24
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	440b      	add	r3, r1
 8001b7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3318      	adds	r3, #24
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3304      	adds	r3, #4
 8001b90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	7d1b      	ldrb	r3, [r3, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d111      	bne.n	8001bbe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6811      	ldr	r1, [r2, #0]
 8001bae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3318      	adds	r3, #24
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	440b      	add	r3, r1
 8001bba:	3304      	adds	r3, #4
 8001bbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	061a      	lsls	r2, r3, #24
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3306      	adds	r3, #6
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3305      	adds	r3, #5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	3204      	adds	r2, #4
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	4610      	mov	r0, r2
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	6811      	ldr	r1, [r2, #0]
 8001be6:	ea43 0200 	orr.w	r2, r3, r0
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bf4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	061a      	lsls	r2, r3, #24
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3302      	adds	r3, #2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4313      	orrs	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	4610      	mov	r0, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	6811      	ldr	r1, [r2, #0]
 8001c1c:	ea43 0200 	orr.w	r2, r3, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3318      	adds	r3, #24
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6811      	ldr	r1, [r2, #0]
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3318      	adds	r3, #24
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e00e      	b.n	8001c6e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e006      	b.n	8001c6e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d003      	beq.n	8001c9e <HAL_CAN_GetRxMessage+0x24>
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	f040 80f3 	bne.w	8001e84 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0e7      	b.n	8001e92 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0d8      	b.n	8001e92 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	331b      	adds	r3, #27
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0204 	and.w	r2, r3, #4
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	331b      	adds	r3, #27
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0d5b      	lsrs	r3, r3, #21
 8001d0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e00b      	b.n	8001d30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	331b      	adds	r3, #27
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331b      	adds	r3, #27
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0202 	and.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	331b      	adds	r3, #27
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	331b      	adds	r3, #27
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	331b      	adds	r3, #27
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0a1a      	lsrs	r2, r3, #8
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0c1a      	lsrs	r2, r3, #16
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e1a      	lsrs	r2, r3, #24
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3303      	adds	r3, #3
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3304      	adds	r3, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0a1a      	lsrs	r2, r3, #8
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	3305      	adds	r3, #5
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0c1a      	lsrs	r2, r3, #16
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3306      	adds	r3, #6
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e1a      	lsrs	r2, r3, #24
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3307      	adds	r3, #7
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e006      	b.n	8001e92 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d002      	beq.n	8001ebc <HAL_CAN_ActivateNotification+0x1e>
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d109      	bne.n	8001ed0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6959      	ldr	r1, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e006      	b.n	8001ede <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	@ 0x28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d07c      	beq.n	800202a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d023      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f983 	bl	8002258 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f52:	e016      	b.n	8001f82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	e00c      	b.n	8001f82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f7a:	e002      	b.n	8001f82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f989 	bl	8002294 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d024      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f963 	bl	800226c <HAL_CAN_TxMailbox1CompleteCallback>
 8001fa6:	e016      	b.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fba:	e00c      	b.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fce:	e002      	b.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f969 	bl	80022a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d024      	beq.n	800202a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fe8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f943 	bl	8002280 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ffa:	e016      	b.n	800202a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
 800200e:	e00c      	b.n	800202a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
 8002022:	e002      	b.n	800202a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f949 	bl	80022bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00c      	beq.n	800204e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2210      	movs	r2, #16
 800204c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2208      	movs	r2, #8
 8002068:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f930 	bl	80022d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7fe fbb1 	bl	80007f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00c      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2210      	movs	r2, #16
 80020b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2208      	movs	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f912 	bl	80022f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8f9 	bl	80022e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2210      	movs	r2, #16
 800210c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8fc 	bl	800230c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2208      	movs	r2, #8
 800212e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8f5 	bl	8002320 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d07b      	beq.n	8002238 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d072      	beq.n	8002230 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d043      	beq.n	8002230 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d03e      	beq.n	8002230 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021b8:	2b60      	cmp	r3, #96	@ 0x60
 80021ba:	d02b      	beq.n	8002214 <HAL_CAN_IRQHandler+0x32a>
 80021bc:	2b60      	cmp	r3, #96	@ 0x60
 80021be:	d82e      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021c0:	2b50      	cmp	r3, #80	@ 0x50
 80021c2:	d022      	beq.n	800220a <HAL_CAN_IRQHandler+0x320>
 80021c4:	2b50      	cmp	r3, #80	@ 0x50
 80021c6:	d82a      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021c8:	2b40      	cmp	r3, #64	@ 0x40
 80021ca:	d019      	beq.n	8002200 <HAL_CAN_IRQHandler+0x316>
 80021cc:	2b40      	cmp	r3, #64	@ 0x40
 80021ce:	d826      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021d0:	2b30      	cmp	r3, #48	@ 0x30
 80021d2:	d010      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x30c>
 80021d4:	2b30      	cmp	r3, #48	@ 0x30
 80021d6:	d822      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d002      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x2f8>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d005      	beq.n	80021ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021e0:	e01d      	b.n	800221e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ea:	e019      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f4:	e014      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fe:	e00f      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002208:	e00a      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002212:	e005      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800221c:	e000      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            break;
 800221e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800222e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2204      	movs	r2, #4
 8002236:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f872 	bl	8002334 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	@ 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	@ (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff3e 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff8e 	bl	800243c <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5d 	bl	80023e8 <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff31 	bl	80023ac <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff f854 	bl	8001624 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d008      	beq.n	800259c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e052      	b.n	8002642 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0216 	bic.w	r2, r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <HAL_DMA_Abort+0x62>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0208 	bic.w	r2, r2, #8
 80025da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ec:	e013      	b.n	8002616 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ee:	f7ff f819 	bl	8001624 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d90c      	bls.n	8002616 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e015      	b.n	8002642 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e4      	bne.n	80025ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	223f      	movs	r2, #63	@ 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d004      	beq.n	8002668 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2280      	movs	r2, #128	@ 0x80
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e00c      	b.n	8002682 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2205      	movs	r2, #5
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e16b      	b.n	8002984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 815a 	bne.w	800297e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80b4 	beq.w	800297e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b60      	ldr	r3, [pc, #384]	@ (800299c <HAL_GPIO_Init+0x30c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a5f      	ldr	r2, [pc, #380]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a5b      	ldr	r2, [pc, #364]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a52      	ldr	r2, [pc, #328]	@ (80029a4 <HAL_GPIO_Init+0x314>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a51      	ldr	r2, [pc, #324]	@ (80029a8 <HAL_GPIO_Init+0x318>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a50      	ldr	r2, [pc, #320]	@ (80029ac <HAL_GPIO_Init+0x31c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4f      	ldr	r2, [pc, #316]	@ (80029b0 <HAL_GPIO_Init+0x320>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x21a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4e      	ldr	r2, [pc, #312]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x216>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4d      	ldr	r2, [pc, #308]	@ (80029b8 <HAL_GPIO_Init+0x328>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <HAL_GPIO_Init+0x32c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4b      	ldr	r2, [pc, #300]	@ (80029c0 <HAL_GPIO_Init+0x330>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x20a>
 8002896:	2307      	movs	r3, #7
 8002898:	e00e      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 800289a:	2308      	movs	r3, #8
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 800289e:	2306      	movs	r3, #6
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a12      	ldr	r2, [pc, #72]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae90 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	e001      	b.n	80029ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0e:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd ff64 	bl	80008e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e267      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b85      	ldr	r3, [pc, #532]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b82      	ldr	r3, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e242      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b76      	ldr	r3, [pc, #472]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a75      	ldr	r2, [pc, #468]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b69      	ldr	r3, [pc, #420]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a68      	ldr	r2, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fda0 	bl	8001624 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fd9c 	bl	8001624 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e207      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fd8c 	bl	8001624 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fd88 	bl	8001624 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1f3      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b44      	ldr	r3, [pc, #272]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1c7      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4937      	ldr	r1, [pc, #220]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b34      	ldr	r3, [pc, #208]	@ (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fd41 	bl	8001624 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fd3d 	bl	8001624 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a8      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4925      	ldr	r1, [pc, #148]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fd20 	bl	8001624 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fd1c 	bl	8001624 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e187      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d036      	beq.n	8002c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fd00 	bl	8001624 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fcfc 	bl	8001624 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e167      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fce9 	bl	8001624 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e00e      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe fce5 	bl	8001624 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d907      	bls.n	8002c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e150      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	42470000 	.word	0x42470000
 8002c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b88      	ldr	r3, [pc, #544]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ea      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8097 	beq.w	8002dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b81      	ldr	r3, [pc, #516]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cae:	4b7a      	ldr	r3, [pc, #488]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b77      	ldr	r3, [pc, #476]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d118      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b74      	ldr	r3, [pc, #464]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a73      	ldr	r2, [pc, #460]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fca5 	bl	8001624 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe fca1 	bl	8001624 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e10c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2ea>
 8002d04:	4b64      	ldr	r3, [pc, #400]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a63      	ldr	r2, [pc, #396]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x30c>
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d26:	4b5c      	ldr	r3, [pc, #368]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d34:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d40:	4b55      	ldr	r3, [pc, #340]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0304 	bic.w	r3, r3, #4
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fc66 	bl	8001624 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fc62 	bl	8001624 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0cb      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ee      	beq.n	8002d5c <HAL_RCC_OscConfig+0x334>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fc50 	bl	8001624 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe fc4c 	bl	8001624 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0b5      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	4a38      	ldr	r2, [pc, #224]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a1 	beq.w	8002f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d05c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d141      	bne.n	8002e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fc20 	bl	8001624 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fc1c 	bl	8001624 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e087      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	491b      	ldr	r1, [pc, #108]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fbf5 	bl	8001624 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fbf1 	bl	8001624 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e05c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x416>
 8002e5c:	e054      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fbde 	bl	8001624 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fbda 	bl	8001624 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e045      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x444>
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e038      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe fb0c 	bl	8001624 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe fb08 	bl	8001624 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fa6c 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080055f0 	.word	0x080055f0
 80030dc:	20000004 	.word	0x20000004
 80030e0:	20000008 	.word	0x20000008

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b094      	sub	sp, #80	@ 0x50
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80e1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0db      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b73      	ldr	r3, [pc, #460]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800311a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800311c:	e0db      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003122:	e0d8      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800312c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	633b      	str	r3, [r7, #48]	@ 0x30
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
 8003152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4621      	mov	r1, r4
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	6139      	str	r1, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	ebb2 0801 	subs.w	r8, r2, r1
 800319c:	4659      	mov	r1, fp
 800319e:	eb63 0901 	sbc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	462b      	mov	r3, r5
 80031c4:	eb49 0303 	adc.w	r3, r9, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	024b      	lsls	r3, r1, #9
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e0:	4621      	mov	r1, r4
 80031e2:	024a      	lsls	r2, r1, #9
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f4:	f7fd f83c 	bl	8000270 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003200:	e058      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b38      	ldr	r3, [pc, #224]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	4611      	mov	r1, r2
 800320e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
 8003218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322e:	0150      	lsls	r0, r2, #5
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4641      	mov	r1, r8
 8003236:	ebb2 0a01 	subs.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003254:	ebb2 040a 	subs.w	r4, r2, sl
 8003258:	eb63 050b 	sbc.w	r5, r3, fp
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	464b      	mov	r3, r9
 8003278:	eb45 0303 	adc.w	r3, r5, r3
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	61fa      	str	r2, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	f7fc ffe2 	bl	8000270 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80032c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3750      	adds	r7, #80	@ 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000004 	.word	0x20000004

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08005600 	.word	0x08005600

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	@ (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08005600 	.word	0x08005600

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e041      	b.n	80033ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd ff98 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fa96 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e04e      	b.n	80034ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a23      	ldr	r2, [pc, #140]	@ (80034bc <HAL_TIM_Base_Start_IT+0xc4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d01d      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1e      	ldr	r2, [pc, #120]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a18      	ldr	r2, [pc, #96]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d111      	bne.n	800349c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d010      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	e007      	b.n	80034ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40010400 	.word	0x40010400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40001800 	.word	0x40001800

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9b5 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9a7 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f9b8 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f98b 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f97d 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f98e 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f961 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f953 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f964 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f937 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f929 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f93a 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd f92a 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b80      	cmp	r3, #128	@ 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b80      	cmp	r3, #128	@ 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fae0 	bl	8003c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b40      	cmp	r3, #64	@ 0x40
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8ff 	bl	80038b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0220 	mvn.w	r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 faaa 	bl	8003c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_TIM_ConfigClockSource+0x1c>
 8003700:	2302      	movs	r3, #2
 8003702:	e0b4      	b.n	800386e <HAL_TIM_ConfigClockSource+0x186>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800372a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373c:	d03e      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0xd4>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003742:	f200 8087 	bhi.w	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374a:	f000 8086 	beq.w	800385a <HAL_TIM_ConfigClockSource+0x172>
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003752:	d87f      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b70      	cmp	r3, #112	@ 0x70
 8003756:	d01a      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xa6>
 8003758:	2b70      	cmp	r3, #112	@ 0x70
 800375a:	d87b      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b60      	cmp	r3, #96	@ 0x60
 800375e:	d050      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x11a>
 8003760:	2b60      	cmp	r3, #96	@ 0x60
 8003762:	d877      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b50      	cmp	r3, #80	@ 0x50
 8003766:	d03c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003768:	2b50      	cmp	r3, #80	@ 0x50
 800376a:	d873      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d058      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x13a>
 8003770:	2b40      	cmp	r3, #64	@ 0x40
 8003772:	d86f      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b30      	cmp	r3, #48	@ 0x30
 8003776:	d064      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 8003778:	2b30      	cmp	r3, #48	@ 0x30
 800377a:	d86b      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d060      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d867      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05c      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d05a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 800378c:	e062      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f000 f9ad 	bl	8003afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	609a      	str	r2, [r3, #8]
      break;
 80037ba:	e04f      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6899      	ldr	r1, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f000 f996 	bl	8003afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037de:	609a      	str	r2, [r3, #8]
      break;
 80037e0:	e03c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 f90a 	bl	8003a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2150      	movs	r1, #80	@ 0x50
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f963 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 8003800:	e02c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	461a      	mov	r2, r3
 8003810:	f000 f929 	bl	8003a66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2160      	movs	r1, #96	@ 0x60
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f953 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 8003820:	e01c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	461a      	mov	r2, r3
 8003830:	f000 f8ea 	bl	8003a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2140      	movs	r1, #64	@ 0x40
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f943 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 8003840:	e00c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f000 f93a 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 8003852:	e003      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e000      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800385a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a40      	ldr	r2, [pc, #256]	@ (80039dc <TIM_Base_SetConfig+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d00f      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3d      	ldr	r2, [pc, #244]	@ (80039e0 <TIM_Base_SetConfig+0x118>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a3c      	ldr	r2, [pc, #240]	@ (80039e4 <TIM_Base_SetConfig+0x11c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a3b      	ldr	r2, [pc, #236]	@ (80039e8 <TIM_Base_SetConfig+0x120>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3a      	ldr	r2, [pc, #232]	@ (80039ec <TIM_Base_SetConfig+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2f      	ldr	r2, [pc, #188]	@ (80039dc <TIM_Base_SetConfig+0x114>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02b      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003928:	d027      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2c      	ldr	r2, [pc, #176]	@ (80039e0 <TIM_Base_SetConfig+0x118>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d023      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2b      	ldr	r2, [pc, #172]	@ (80039e4 <TIM_Base_SetConfig+0x11c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <TIM_Base_SetConfig+0x120>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01b      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a29      	ldr	r2, [pc, #164]	@ (80039ec <TIM_Base_SetConfig+0x124>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d017      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a28      	ldr	r2, [pc, #160]	@ (80039f0 <TIM_Base_SetConfig+0x128>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a27      	ldr	r2, [pc, #156]	@ (80039f4 <TIM_Base_SetConfig+0x12c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00f      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a26      	ldr	r2, [pc, #152]	@ (80039f8 <TIM_Base_SetConfig+0x130>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <TIM_Base_SetConfig+0x134>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a24      	ldr	r2, [pc, #144]	@ (8003a00 <TIM_Base_SetConfig+0x138>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a23      	ldr	r2, [pc, #140]	@ (8003a04 <TIM_Base_SetConfig+0x13c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <TIM_Base_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0xf8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <TIM_Base_SetConfig+0x124>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	615a      	str	r2, [r3, #20]
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40010400 	.word	0x40010400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800
 80039fc:	40001800 	.word	0x40001800
 8003a00:	40001c00 	.word	0x40001c00
 8003a04:	40002000 	.word	0x40002000

08003a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0201 	bic.w	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 030a 	bic.w	r3, r3, #10
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b087      	sub	sp, #28
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f043 0307 	orr.w	r3, r3, #7
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	021a      	lsls	r2, r3, #8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e05a      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba0:	d01d      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	@ (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a17      	ldr	r2, [pc, #92]	@ (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	@ (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40010400 	.word	0x40010400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40001800 	.word	0x40001800

08003c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e03f      	b.n	8003cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd fb3e 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	@ 0x24
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fd71 	bl	8004788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b08a      	sub	sp, #40	@ 0x28
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d17c      	bne.n	8003e10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_Transmit+0x2c>
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e075      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x3e>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e06e      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2221      	movs	r2, #33	@ 0x21
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fc6b 	bl	8001624 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d64:	d108      	bne.n	8003d78 <HAL_UART_Transmit+0x82>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e003      	b.n	8003d80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003d88:	e02a      	b.n	8003de0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2180      	movs	r1, #128	@ 0x80
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 faef 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e036      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e007      	b.n	8003dd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1cf      	bne.n	8003d8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	@ 0x40
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fabf 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e006      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_UART_IRQHandler+0x66>
 8003e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fbc9 	bl	8004612 <UART_Receive_IT>
      return;
 8003e80:	e256      	b.n	8004330 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80de 	beq.w	8004048 <HAL_UART_IRQHandler+0x22c>
 8003e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80d1 	beq.w	8004048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xae>
 8003eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_UART_IRQHandler+0xd2>
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0xf6>
 8003efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d011      	beq.n	8003f42 <HAL_UART_IRQHandler+0x126>
 8003f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f043 0208 	orr.w	r2, r3, #8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 81ed 	beq.w	8004326 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_UART_IRQHandler+0x14e>
 8003f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb54 	bl	8004612 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_UART_IRQHandler+0x17a>
 8003f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d04f      	beq.n	8004036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa5c 	bl	8004454 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d141      	bne.n	800402e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1d9      	bne.n	8003faa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d013      	beq.n	8004026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004002:	4a7d      	ldr	r2, [pc, #500]	@ (80041f8 <HAL_UART_IRQHandler+0x3dc>)
 8004004:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fb1d 	bl	800264a <HAL_DMA_Abort_IT>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004020:	4610      	mov	r0, r2
 8004022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	e00e      	b.n	8004044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f990 	bl	800434c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402c:	e00a      	b.n	8004044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f98c 	bl	800434c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	e006      	b.n	8004044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f988 	bl	800434c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004042:	e170      	b.n	8004326 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	bf00      	nop
    return;
 8004046:	e16e      	b.n	8004326 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	f040 814a 	bne.w	80042e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8143 	beq.w	80042e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 813c 	beq.w	80042e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b40      	cmp	r3, #64	@ 0x40
 8004090:	f040 80b4 	bne.w	80041fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8140 	beq.w	800432a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040b2:	429a      	cmp	r2, r3
 80040b4:	f080 8139 	bcs.w	800432a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ca:	f000 8088 	beq.w	80041de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004106:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1d9      	bne.n	80040ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800412a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3314      	adds	r3, #20
 800413a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800413e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004142:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004146:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e1      	bne.n	800411a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800417a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800417c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004180:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e3      	bne.n	8004156 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ae:	f023 0310 	bic.w	r3, r3, #16
 80041b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e3      	bne.n	800419c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe f9c6 	bl	800256a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8b6 	bl	8004360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041f4:	e099      	b.n	800432a <HAL_UART_IRQHandler+0x50e>
 80041f6:	bf00      	nop
 80041f8:	0800451b 	.word	0x0800451b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004204:	b29b      	uxth	r3, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 808b 	beq.w	800432e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8086 	beq.w	800432e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004238:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004246:	647a      	str	r2, [r7, #68]	@ 0x44
 8004248:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800424c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e3      	bne.n	8004222 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	623b      	str	r3, [r7, #32]
   return(result);
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800427e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e3      	bne.n	800425a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0310 	bic.w	r3, r3, #16
 80042b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042c4:	61fa      	str	r2, [r7, #28]
 80042c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	617b      	str	r3, [r7, #20]
   return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e3      	bne.n	80042a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f83e 	bl	8004360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e4:	e023      	b.n	800432e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_UART_IRQHandler+0x4ea>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f91f 	bl	8004542 <UART_Transmit_IT>
    return;
 8004304:	e014      	b.n	8004330 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <HAL_UART_IRQHandler+0x514>
 8004312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f95f 	bl	80045e2 <UART_EndTransmit_IT>
    return;
 8004324:	e004      	b.n	8004330 <HAL_UART_IRQHandler+0x514>
    return;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <HAL_UART_IRQHandler+0x514>
      return;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_UART_IRQHandler+0x514>
      return;
 800432e:	bf00      	nop
  }
}
 8004330:	37e8      	adds	r7, #232	@ 0xe8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop

08004338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b090      	sub	sp, #64	@ 0x40
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004388:	e050      	b.n	800442c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d04c      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004398:	f7fd f944 	bl	8001624 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d241      	bcs.n	800442c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80043be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80043ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	613b      	str	r3, [r7, #16]
   return(result);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043fc:	623a      	str	r2, [r7, #32]
 80043fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	69f9      	ldr	r1, [r7, #28]
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	61bb      	str	r3, [r7, #24]
   return(result);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e00f      	b.n	800444c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	429a      	cmp	r2, r3
 8004448:	d09f      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3740      	adds	r7, #64	@ 0x40
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b095      	sub	sp, #84	@ 0x54
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800447c:	643a      	str	r2, [r7, #64]	@ 0x40
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d119      	bne.n	8004500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ec:	61ba      	str	r2, [r7, #24]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800450e:	bf00      	nop
 8004510:	3754      	adds	r7, #84	@ 0x54
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff ff09 	bl	800434c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b21      	cmp	r3, #33	@ 0x21
 8004554:	d13e      	bne.n	80045d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455e:	d114      	bne.n	800458a <UART_Transmit_IT+0x48>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d110      	bne.n	800458a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]
 8004588:	e008      	b.n	800459c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6211      	str	r1, [r2, #32]
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4619      	mov	r1, r3
 80045aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10f      	bne.n	80045d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fe98 	bl	8004338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08c      	sub	sp, #48	@ 0x30
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b22      	cmp	r3, #34	@ 0x22
 8004624:	f040 80ab 	bne.w	800477e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004630:	d117      	bne.n	8004662 <UART_Receive_IT+0x50>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d113      	bne.n	8004662 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	b29a      	uxth	r2, r3
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	1c9a      	adds	r2, r3, #2
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004660:	e026      	b.n	80046b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004674:	d007      	beq.n	8004686 <UART_Receive_IT+0x74>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <UART_Receive_IT+0x82>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e008      	b.n	80046a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4619      	mov	r1, r3
 80046be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d15a      	bne.n	800477a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0220 	bic.w	r2, r2, #32
 80046d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	2b01      	cmp	r3, #1
 8004702:	d135      	bne.n	8004770 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	613b      	str	r3, [r7, #16]
   return(result);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472a:	623a      	str	r2, [r7, #32]
 800472c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	69f9      	ldr	r1, [r7, #28]
 8004730:	6a3a      	ldr	r2, [r7, #32]
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	61bb      	str	r3, [r7, #24]
   return(result);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b10      	cmp	r3, #16
 800474a:	d10a      	bne.n	8004762 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fdf9 	bl	8004360 <HAL_UARTEx_RxEventCallback>
 800476e:	e002      	b.n	8004776 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fc fc95 	bl	80010a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e002      	b.n	8004780 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3730      	adds	r7, #48	@ 0x30
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800478c:	b0c0      	sub	sp, #256	@ 0x100
 800478e:	af00      	add	r7, sp, #0
 8004790:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	ea40 0301 	orr.w	r3, r0, r1
 80047b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	431a      	orrs	r2, r3
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047e0:	f021 010c 	bic.w	r1, r1, #12
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ee:	430b      	orrs	r3, r1
 80047f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	6999      	ldr	r1, [r3, #24]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	ea40 0301 	orr.w	r3, r0, r1
 800480e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b8f      	ldr	r3, [pc, #572]	@ (8004a54 <UART_SetConfig+0x2cc>)
 8004818:	429a      	cmp	r2, r3
 800481a:	d005      	beq.n	8004828 <UART_SetConfig+0xa0>
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b8d      	ldr	r3, [pc, #564]	@ (8004a58 <UART_SetConfig+0x2d0>)
 8004824:	429a      	cmp	r2, r3
 8004826:	d104      	bne.n	8004832 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe fd82 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 800482c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004830:	e003      	b.n	800483a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004832:	f7fe fd69 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8004836:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004844:	f040 810c 	bne.w	8004a60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484c:	2200      	movs	r2, #0
 800484e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004852:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004856:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800485a:	4622      	mov	r2, r4
 800485c:	462b      	mov	r3, r5
 800485e:	1891      	adds	r1, r2, r2
 8004860:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004862:	415b      	adcs	r3, r3
 8004864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004866:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800486a:	4621      	mov	r1, r4
 800486c:	eb12 0801 	adds.w	r8, r2, r1
 8004870:	4629      	mov	r1, r5
 8004872:	eb43 0901 	adc.w	r9, r3, r1
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488a:	4690      	mov	r8, r2
 800488c:	4699      	mov	r9, r3
 800488e:	4623      	mov	r3, r4
 8004890:	eb18 0303 	adds.w	r3, r8, r3
 8004894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004898:	462b      	mov	r3, r5
 800489a:	eb49 0303 	adc.w	r3, r9, r3
 800489e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048b6:	460b      	mov	r3, r1
 80048b8:	18db      	adds	r3, r3, r3
 80048ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80048bc:	4613      	mov	r3, r2
 80048be:	eb42 0303 	adc.w	r3, r2, r3
 80048c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048cc:	f7fb fcd0 	bl	8000270 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b61      	ldr	r3, [pc, #388]	@ (8004a5c <UART_SetConfig+0x2d4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048f8:	415b      	adcs	r3, r3
 80048fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004900:	4641      	mov	r1, r8
 8004902:	eb12 0a01 	adds.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb43 0b01 	adc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004918:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800491c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004920:	4692      	mov	sl, r2
 8004922:	469b      	mov	fp, r3
 8004924:	4643      	mov	r3, r8
 8004926:	eb1a 0303 	adds.w	r3, sl, r3
 800492a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800492e:	464b      	mov	r3, r9
 8004930:	eb4b 0303 	adc.w	r3, fp, r3
 8004934:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004944:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800494c:	460b      	mov	r3, r1
 800494e:	18db      	adds	r3, r3, r3
 8004950:	643b      	str	r3, [r7, #64]	@ 0x40
 8004952:	4613      	mov	r3, r2
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
 800495a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800495e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004962:	f7fb fc85 	bl	8000270 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4611      	mov	r1, r2
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <UART_SetConfig+0x2d4>)
 800496e:	fba3 2301 	umull	r2, r3, r3, r1
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2264      	movs	r2, #100	@ 0x64
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	1acb      	subs	r3, r1, r3
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004982:	4b36      	ldr	r3, [pc, #216]	@ (8004a5c <UART_SetConfig+0x2d4>)
 8004984:	fba3 2302 	umull	r2, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004990:	441c      	add	r4, r3
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800499c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049ac:	415b      	adcs	r3, r3
 80049ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049e8:	464b      	mov	r3, r9
 80049ea:	460a      	mov	r2, r1
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a08:	460b      	mov	r3, r1
 8004a0a:	18db      	adds	r3, r3, r3
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a0e:	4613      	mov	r3, r2
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a1e:	f7fb fc27 	bl	8000270 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <UART_SetConfig+0x2d4>)
 8004a28:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	2164      	movs	r1, #100	@ 0x64
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	3332      	adds	r3, #50	@ 0x32
 8004a3a:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <UART_SetConfig+0x2d4>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	f003 0207 	and.w	r2, r3, #7
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4422      	add	r2, r4
 8004a4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a50:	e106      	b.n	8004c60 <UART_SetConfig+0x4d8>
 8004a52:	bf00      	nop
 8004a54:	40011000 	.word	0x40011000
 8004a58:	40011400 	.word	0x40011400
 8004a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a72:	4642      	mov	r2, r8
 8004a74:	464b      	mov	r3, r9
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	6239      	str	r1, [r7, #32]
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a82:	4641      	mov	r1, r8
 8004a84:	1854      	adds	r4, r2, r1
 8004a86:	4649      	mov	r1, r9
 8004a88:	eb43 0501 	adc.w	r5, r3, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	00eb      	lsls	r3, r5, #3
 8004a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9a:	00e2      	lsls	r2, r4, #3
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	461d      	mov	r5, r3
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	18e3      	adds	r3, r4, r3
 8004aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	eb45 0303 	adc.w	r3, r5, r3
 8004aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ace:	4629      	mov	r1, r5
 8004ad0:	008b      	lsls	r3, r1, #2
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ad8:	4621      	mov	r1, r4
 8004ada:	008a      	lsls	r2, r1, #2
 8004adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ae0:	f7fb fbc6 	bl	8000270 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4b60      	ldr	r3, [pc, #384]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	011c      	lsls	r4, r3, #4
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004afc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	61b9      	str	r1, [r7, #24]
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b14:	4641      	mov	r1, r8
 8004b16:	1851      	adds	r1, r2, r1
 8004b18:	6139      	str	r1, [r7, #16]
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	414b      	adcs	r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4651      	mov	r1, sl
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4642      	mov	r2, r8
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b76:	4641      	mov	r1, r8
 8004b78:	008a      	lsls	r2, r1, #2
 8004b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b7e:	f7fb fb77 	bl	8000270 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	4b38      	ldr	r3, [pc, #224]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2264      	movs	r2, #100	@ 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	1acb      	subs	r3, r1, r3
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	3332      	adds	r3, #50	@ 0x32
 8004b9c:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba8:	441c      	add	r4, r3
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bc8:	4641      	mov	r1, r8
 8004bca:	1851      	adds	r1, r2, r1
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	4649      	mov	r1, r9
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004be0:	4659      	mov	r1, fp
 8004be2:	00cb      	lsls	r3, r1, #3
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bea:	4651      	mov	r1, sl
 8004bec:	00ca      	lsls	r2, r1, #3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	008b      	lsls	r3, r1, #2
 8004c20:	4641      	mov	r1, r8
 8004c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c26:	4641      	mov	r1, r8
 8004c28:	008a      	lsls	r2, r1, #2
 8004c2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c2e:	f7fb fb1f 	bl	8000270 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004c38:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	2164      	movs	r1, #100	@ 0x64
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	3332      	adds	r3, #50	@ 0x32
 8004c4a:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f003 020f 	and.w	r2, r3, #15
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4422      	add	r2, r4
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c66:	46bd      	mov	sp, r7
 8004c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6c:	51eb851f 	.word	0x51eb851f

08004c70 <siprintf>:
 8004c70:	b40e      	push	{r1, r2, r3}
 8004c72:	b510      	push	{r4, lr}
 8004c74:	b09d      	sub	sp, #116	@ 0x74
 8004c76:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c78:	9002      	str	r0, [sp, #8]
 8004c7a:	9006      	str	r0, [sp, #24]
 8004c7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c80:	480a      	ldr	r0, [pc, #40]	@ (8004cac <siprintf+0x3c>)
 8004c82:	9107      	str	r1, [sp, #28]
 8004c84:	9104      	str	r1, [sp, #16]
 8004c86:	490a      	ldr	r1, [pc, #40]	@ (8004cb0 <siprintf+0x40>)
 8004c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c8c:	9105      	str	r1, [sp, #20]
 8004c8e:	2400      	movs	r4, #0
 8004c90:	a902      	add	r1, sp, #8
 8004c92:	6800      	ldr	r0, [r0, #0]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c98:	f000 f994 	bl	8004fc4 <_svfiprintf_r>
 8004c9c:	9b02      	ldr	r3, [sp, #8]
 8004c9e:	701c      	strb	r4, [r3, #0]
 8004ca0:	b01d      	add	sp, #116	@ 0x74
 8004ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca6:	b003      	add	sp, #12
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	ffff0208 	.word	0xffff0208

08004cb4 <memset>:
 8004cb4:	4402      	add	r2, r0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xa>
 8004cbc:	4770      	bx	lr
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x4>

08004cc4 <__errno>:
 8004cc4:	4b01      	ldr	r3, [pc, #4]	@ (8004ccc <__errno+0x8>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <__libc_init_array>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d08 <__libc_init_array+0x38>)
 8004cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d0c <__libc_init_array+0x3c>)
 8004cd6:	1b64      	subs	r4, r4, r5
 8004cd8:	10a4      	asrs	r4, r4, #2
 8004cda:	2600      	movs	r6, #0
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	d109      	bne.n	8004cf4 <__libc_init_array+0x24>
 8004ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d10 <__libc_init_array+0x40>)
 8004ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d14 <__libc_init_array+0x44>)
 8004ce4:	f000 fc64 	bl	80055b0 <_init>
 8004ce8:	1b64      	subs	r4, r4, r5
 8004cea:	10a4      	asrs	r4, r4, #2
 8004cec:	2600      	movs	r6, #0
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	d105      	bne.n	8004cfe <__libc_init_array+0x2e>
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf8:	4798      	blx	r3
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7ee      	b.n	8004cdc <__libc_init_array+0xc>
 8004cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d02:	4798      	blx	r3
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7f2      	b.n	8004cee <__libc_init_array+0x1e>
 8004d08:	08005644 	.word	0x08005644
 8004d0c:	08005644 	.word	0x08005644
 8004d10:	08005644 	.word	0x08005644
 8004d14:	08005648 	.word	0x08005648

08004d18 <__retarget_lock_acquire_recursive>:
 8004d18:	4770      	bx	lr

08004d1a <__retarget_lock_release_recursive>:
 8004d1a:	4770      	bx	lr

08004d1c <_free_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4605      	mov	r5, r0
 8004d20:	2900      	cmp	r1, #0
 8004d22:	d041      	beq.n	8004da8 <_free_r+0x8c>
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f0c      	subs	r4, r1, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfb8      	it	lt
 8004d2e:	18e4      	addlt	r4, r4, r3
 8004d30:	f000 f8e0 	bl	8004ef4 <__malloc_lock>
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <_free_r+0x90>)
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	b933      	cbnz	r3, 8004d48 <_free_r+0x2c>
 8004d3a:	6063      	str	r3, [r4, #4]
 8004d3c:	6014      	str	r4, [r2, #0]
 8004d3e:	4628      	mov	r0, r5
 8004d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d44:	f000 b8dc 	b.w	8004f00 <__malloc_unlock>
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d908      	bls.n	8004d5e <_free_r+0x42>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	1821      	adds	r1, r4, r0
 8004d50:	428b      	cmp	r3, r1
 8004d52:	bf01      	itttt	eq
 8004d54:	6819      	ldreq	r1, [r3, #0]
 8004d56:	685b      	ldreq	r3, [r3, #4]
 8004d58:	1809      	addeq	r1, r1, r0
 8004d5a:	6021      	streq	r1, [r4, #0]
 8004d5c:	e7ed      	b.n	8004d3a <_free_r+0x1e>
 8004d5e:	461a      	mov	r2, r3
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	b10b      	cbz	r3, 8004d68 <_free_r+0x4c>
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d9fa      	bls.n	8004d5e <_free_r+0x42>
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	1850      	adds	r0, r2, r1
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d10b      	bne.n	8004d88 <_free_r+0x6c>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	4401      	add	r1, r0
 8004d74:	1850      	adds	r0, r2, r1
 8004d76:	4283      	cmp	r3, r0
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	d1e0      	bne.n	8004d3e <_free_r+0x22>
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	6053      	str	r3, [r2, #4]
 8004d82:	4408      	add	r0, r1
 8004d84:	6010      	str	r0, [r2, #0]
 8004d86:	e7da      	b.n	8004d3e <_free_r+0x22>
 8004d88:	d902      	bls.n	8004d90 <_free_r+0x74>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	e7d6      	b.n	8004d3e <_free_r+0x22>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	1821      	adds	r1, r4, r0
 8004d94:	428b      	cmp	r3, r1
 8004d96:	bf04      	itt	eq
 8004d98:	6819      	ldreq	r1, [r3, #0]
 8004d9a:	685b      	ldreq	r3, [r3, #4]
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	bf04      	itt	eq
 8004da0:	1809      	addeq	r1, r1, r0
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	6054      	str	r4, [r2, #4]
 8004da6:	e7ca      	b.n	8004d3e <_free_r+0x22>
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	2000135c 	.word	0x2000135c

08004db0 <sbrk_aligned>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4e0f      	ldr	r6, [pc, #60]	@ (8004df0 <sbrk_aligned+0x40>)
 8004db4:	460c      	mov	r4, r1
 8004db6:	6831      	ldr	r1, [r6, #0]
 8004db8:	4605      	mov	r5, r0
 8004dba:	b911      	cbnz	r1, 8004dc2 <sbrk_aligned+0x12>
 8004dbc:	f000 fba4 	bl	8005508 <_sbrk_r>
 8004dc0:	6030      	str	r0, [r6, #0]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fb9f 	bl	8005508 <_sbrk_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	d103      	bne.n	8004dd6 <sbrk_aligned+0x26>
 8004dce:	f04f 34ff 	mov.w	r4, #4294967295
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
 8004dd6:	1cc4      	adds	r4, r0, #3
 8004dd8:	f024 0403 	bic.w	r4, r4, #3
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d0f8      	beq.n	8004dd2 <sbrk_aligned+0x22>
 8004de0:	1a21      	subs	r1, r4, r0
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 fb90 	bl	8005508 <_sbrk_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d1f2      	bne.n	8004dd2 <sbrk_aligned+0x22>
 8004dec:	e7ef      	b.n	8004dce <sbrk_aligned+0x1e>
 8004dee:	bf00      	nop
 8004df0:	20001358 	.word	0x20001358

08004df4 <_malloc_r>:
 8004df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df8:	1ccd      	adds	r5, r1, #3
 8004dfa:	f025 0503 	bic.w	r5, r5, #3
 8004dfe:	3508      	adds	r5, #8
 8004e00:	2d0c      	cmp	r5, #12
 8004e02:	bf38      	it	cc
 8004e04:	250c      	movcc	r5, #12
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	4606      	mov	r6, r0
 8004e0a:	db01      	blt.n	8004e10 <_malloc_r+0x1c>
 8004e0c:	42a9      	cmp	r1, r5
 8004e0e:	d904      	bls.n	8004e1a <_malloc_r+0x26>
 8004e10:	230c      	movs	r3, #12
 8004e12:	6033      	str	r3, [r6, #0]
 8004e14:	2000      	movs	r0, #0
 8004e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ef0 <_malloc_r+0xfc>
 8004e1e:	f000 f869 	bl	8004ef4 <__malloc_lock>
 8004e22:	f8d8 3000 	ldr.w	r3, [r8]
 8004e26:	461c      	mov	r4, r3
 8004e28:	bb44      	cbnz	r4, 8004e7c <_malloc_r+0x88>
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff ffbf 	bl	8004db0 <sbrk_aligned>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	4604      	mov	r4, r0
 8004e36:	d158      	bne.n	8004eea <_malloc_r+0xf6>
 8004e38:	f8d8 4000 	ldr.w	r4, [r8]
 8004e3c:	4627      	mov	r7, r4
 8004e3e:	2f00      	cmp	r7, #0
 8004e40:	d143      	bne.n	8004eca <_malloc_r+0xd6>
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	d04b      	beq.n	8004ede <_malloc_r+0xea>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	4639      	mov	r1, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	eb04 0903 	add.w	r9, r4, r3
 8004e50:	f000 fb5a 	bl	8005508 <_sbrk_r>
 8004e54:	4581      	cmp	r9, r0
 8004e56:	d142      	bne.n	8004ede <_malloc_r+0xea>
 8004e58:	6821      	ldr	r1, [r4, #0]
 8004e5a:	1a6d      	subs	r5, r5, r1
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ffa6 	bl	8004db0 <sbrk_aligned>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d03a      	beq.n	8004ede <_malloc_r+0xea>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	442b      	add	r3, r5
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	bb62      	cbnz	r2, 8004ed0 <_malloc_r+0xdc>
 8004e76:	f8c8 7000 	str.w	r7, [r8]
 8004e7a:	e00f      	b.n	8004e9c <_malloc_r+0xa8>
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	1b52      	subs	r2, r2, r5
 8004e80:	d420      	bmi.n	8004ec4 <_malloc_r+0xd0>
 8004e82:	2a0b      	cmp	r2, #11
 8004e84:	d917      	bls.n	8004eb6 <_malloc_r+0xc2>
 8004e86:	1961      	adds	r1, r4, r5
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	6025      	str	r5, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	6059      	strne	r1, [r3, #4]
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	bf08      	it	eq
 8004e94:	f8c8 1000 	streq.w	r1, [r8]
 8004e98:	5162      	str	r2, [r4, r5]
 8004e9a:	604b      	str	r3, [r1, #4]
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 f82f 	bl	8004f00 <__malloc_unlock>
 8004ea2:	f104 000b 	add.w	r0, r4, #11
 8004ea6:	1d23      	adds	r3, r4, #4
 8004ea8:	f020 0007 	bic.w	r0, r0, #7
 8004eac:	1ac2      	subs	r2, r0, r3
 8004eae:	bf1c      	itt	ne
 8004eb0:	1a1b      	subne	r3, r3, r0
 8004eb2:	50a3      	strne	r3, [r4, r2]
 8004eb4:	e7af      	b.n	8004e16 <_malloc_r+0x22>
 8004eb6:	6862      	ldr	r2, [r4, #4]
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	bf0c      	ite	eq
 8004ebc:	f8c8 2000 	streq.w	r2, [r8]
 8004ec0:	605a      	strne	r2, [r3, #4]
 8004ec2:	e7eb      	b.n	8004e9c <_malloc_r+0xa8>
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	6864      	ldr	r4, [r4, #4]
 8004ec8:	e7ae      	b.n	8004e28 <_malloc_r+0x34>
 8004eca:	463c      	mov	r4, r7
 8004ecc:	687f      	ldr	r7, [r7, #4]
 8004ece:	e7b6      	b.n	8004e3e <_malloc_r+0x4a>
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d1fb      	bne.n	8004ed0 <_malloc_r+0xdc>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6053      	str	r3, [r2, #4]
 8004edc:	e7de      	b.n	8004e9c <_malloc_r+0xa8>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f000 f80c 	bl	8004f00 <__malloc_unlock>
 8004ee8:	e794      	b.n	8004e14 <_malloc_r+0x20>
 8004eea:	6005      	str	r5, [r0, #0]
 8004eec:	e7d6      	b.n	8004e9c <_malloc_r+0xa8>
 8004eee:	bf00      	nop
 8004ef0:	2000135c 	.word	0x2000135c

08004ef4 <__malloc_lock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__malloc_lock+0x8>)
 8004ef6:	f7ff bf0f 	b.w	8004d18 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	20001354 	.word	0x20001354

08004f00 <__malloc_unlock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__malloc_unlock+0x8>)
 8004f02:	f7ff bf0a 	b.w	8004d1a <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	20001354 	.word	0x20001354

08004f0c <__ssputs_r>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	688e      	ldr	r6, [r1, #8]
 8004f12:	461f      	mov	r7, r3
 8004f14:	42be      	cmp	r6, r7
 8004f16:	680b      	ldr	r3, [r1, #0]
 8004f18:	4682      	mov	sl, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4690      	mov	r8, r2
 8004f1e:	d82d      	bhi.n	8004f7c <__ssputs_r+0x70>
 8004f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f28:	d026      	beq.n	8004f78 <__ssputs_r+0x6c>
 8004f2a:	6965      	ldr	r5, [r4, #20]
 8004f2c:	6909      	ldr	r1, [r1, #16]
 8004f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f32:	eba3 0901 	sub.w	r9, r3, r1
 8004f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f3a:	1c7b      	adds	r3, r7, #1
 8004f3c:	444b      	add	r3, r9
 8004f3e:	106d      	asrs	r5, r5, #1
 8004f40:	429d      	cmp	r5, r3
 8004f42:	bf38      	it	cc
 8004f44:	461d      	movcc	r5, r3
 8004f46:	0553      	lsls	r3, r2, #21
 8004f48:	d527      	bpl.n	8004f9a <__ssputs_r+0x8e>
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	f7ff ff52 	bl	8004df4 <_malloc_r>
 8004f50:	4606      	mov	r6, r0
 8004f52:	b360      	cbz	r0, 8004fae <__ssputs_r+0xa2>
 8004f54:	6921      	ldr	r1, [r4, #16]
 8004f56:	464a      	mov	r2, r9
 8004f58:	f000 fae6 	bl	8005528 <memcpy>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	6126      	str	r6, [r4, #16]
 8004f6a:	6165      	str	r5, [r4, #20]
 8004f6c:	444e      	add	r6, r9
 8004f6e:	eba5 0509 	sub.w	r5, r5, r9
 8004f72:	6026      	str	r6, [r4, #0]
 8004f74:	60a5      	str	r5, [r4, #8]
 8004f76:	463e      	mov	r6, r7
 8004f78:	42be      	cmp	r6, r7
 8004f7a:	d900      	bls.n	8004f7e <__ssputs_r+0x72>
 8004f7c:	463e      	mov	r6, r7
 8004f7e:	6820      	ldr	r0, [r4, #0]
 8004f80:	4632      	mov	r2, r6
 8004f82:	4641      	mov	r1, r8
 8004f84:	f000 faa6 	bl	80054d4 <memmove>
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	1b9b      	subs	r3, r3, r6
 8004f8c:	60a3      	str	r3, [r4, #8]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	4433      	add	r3, r6
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	2000      	movs	r0, #0
 8004f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9a:	462a      	mov	r2, r5
 8004f9c:	f000 fad2 	bl	8005544 <_realloc_r>
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d1e0      	bne.n	8004f68 <__ssputs_r+0x5c>
 8004fa6:	6921      	ldr	r1, [r4, #16]
 8004fa8:	4650      	mov	r0, sl
 8004faa:	f7ff feb7 	bl	8004d1c <_free_r>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	f8ca 3000 	str.w	r3, [sl]
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e7e9      	b.n	8004f96 <__ssputs_r+0x8a>
	...

08004fc4 <_svfiprintf_r>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	4698      	mov	r8, r3
 8004fca:	898b      	ldrh	r3, [r1, #12]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	b09d      	sub	sp, #116	@ 0x74
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	d510      	bpl.n	8004ffa <_svfiprintf_r+0x36>
 8004fd8:	690b      	ldr	r3, [r1, #16]
 8004fda:	b973      	cbnz	r3, 8004ffa <_svfiprintf_r+0x36>
 8004fdc:	2140      	movs	r1, #64	@ 0x40
 8004fde:	f7ff ff09 	bl	8004df4 <_malloc_r>
 8004fe2:	6028      	str	r0, [r5, #0]
 8004fe4:	6128      	str	r0, [r5, #16]
 8004fe6:	b930      	cbnz	r0, 8004ff6 <_svfiprintf_r+0x32>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	b01d      	add	sp, #116	@ 0x74
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	2340      	movs	r3, #64	@ 0x40
 8004ff8:	616b      	str	r3, [r5, #20]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffe:	2320      	movs	r3, #32
 8005000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005004:	f8cd 800c 	str.w	r8, [sp, #12]
 8005008:	2330      	movs	r3, #48	@ 0x30
 800500a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051a8 <_svfiprintf_r+0x1e4>
 800500e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005012:	f04f 0901 	mov.w	r9, #1
 8005016:	4623      	mov	r3, r4
 8005018:	469a      	mov	sl, r3
 800501a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800501e:	b10a      	cbz	r2, 8005024 <_svfiprintf_r+0x60>
 8005020:	2a25      	cmp	r2, #37	@ 0x25
 8005022:	d1f9      	bne.n	8005018 <_svfiprintf_r+0x54>
 8005024:	ebba 0b04 	subs.w	fp, sl, r4
 8005028:	d00b      	beq.n	8005042 <_svfiprintf_r+0x7e>
 800502a:	465b      	mov	r3, fp
 800502c:	4622      	mov	r2, r4
 800502e:	4629      	mov	r1, r5
 8005030:	4638      	mov	r0, r7
 8005032:	f7ff ff6b 	bl	8004f0c <__ssputs_r>
 8005036:	3001      	adds	r0, #1
 8005038:	f000 80a7 	beq.w	800518a <_svfiprintf_r+0x1c6>
 800503c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800503e:	445a      	add	r2, fp
 8005040:	9209      	str	r2, [sp, #36]	@ 0x24
 8005042:	f89a 3000 	ldrb.w	r3, [sl]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 809f 	beq.w	800518a <_svfiprintf_r+0x1c6>
 800504c:	2300      	movs	r3, #0
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
 8005052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005056:	f10a 0a01 	add.w	sl, sl, #1
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	9307      	str	r3, [sp, #28]
 800505e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005062:	931a      	str	r3, [sp, #104]	@ 0x68
 8005064:	4654      	mov	r4, sl
 8005066:	2205      	movs	r2, #5
 8005068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506c:	484e      	ldr	r0, [pc, #312]	@ (80051a8 <_svfiprintf_r+0x1e4>)
 800506e:	f7fb f8af 	bl	80001d0 <memchr>
 8005072:	9a04      	ldr	r2, [sp, #16]
 8005074:	b9d8      	cbnz	r0, 80050ae <_svfiprintf_r+0xea>
 8005076:	06d0      	lsls	r0, r2, #27
 8005078:	bf44      	itt	mi
 800507a:	2320      	movmi	r3, #32
 800507c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005080:	0711      	lsls	r1, r2, #28
 8005082:	bf44      	itt	mi
 8005084:	232b      	movmi	r3, #43	@ 0x2b
 8005086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508a:	f89a 3000 	ldrb.w	r3, [sl]
 800508e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005090:	d015      	beq.n	80050be <_svfiprintf_r+0xfa>
 8005092:	9a07      	ldr	r2, [sp, #28]
 8005094:	4654      	mov	r4, sl
 8005096:	2000      	movs	r0, #0
 8005098:	f04f 0c0a 	mov.w	ip, #10
 800509c:	4621      	mov	r1, r4
 800509e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a2:	3b30      	subs	r3, #48	@ 0x30
 80050a4:	2b09      	cmp	r3, #9
 80050a6:	d94b      	bls.n	8005140 <_svfiprintf_r+0x17c>
 80050a8:	b1b0      	cbz	r0, 80050d8 <_svfiprintf_r+0x114>
 80050aa:	9207      	str	r2, [sp, #28]
 80050ac:	e014      	b.n	80050d8 <_svfiprintf_r+0x114>
 80050ae:	eba0 0308 	sub.w	r3, r0, r8
 80050b2:	fa09 f303 	lsl.w	r3, r9, r3
 80050b6:	4313      	orrs	r3, r2
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	46a2      	mov	sl, r4
 80050bc:	e7d2      	b.n	8005064 <_svfiprintf_r+0xa0>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfbb      	ittet	lt
 80050ca:	425b      	neglt	r3, r3
 80050cc:	f042 0202 	orrlt.w	r2, r2, #2
 80050d0:	9307      	strge	r3, [sp, #28]
 80050d2:	9307      	strlt	r3, [sp, #28]
 80050d4:	bfb8      	it	lt
 80050d6:	9204      	strlt	r2, [sp, #16]
 80050d8:	7823      	ldrb	r3, [r4, #0]
 80050da:	2b2e      	cmp	r3, #46	@ 0x2e
 80050dc:	d10a      	bne.n	80050f4 <_svfiprintf_r+0x130>
 80050de:	7863      	ldrb	r3, [r4, #1]
 80050e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e2:	d132      	bne.n	800514a <_svfiprintf_r+0x186>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	9203      	str	r2, [sp, #12]
 80050ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050f0:	3402      	adds	r4, #2
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051b8 <_svfiprintf_r+0x1f4>
 80050f8:	7821      	ldrb	r1, [r4, #0]
 80050fa:	2203      	movs	r2, #3
 80050fc:	4650      	mov	r0, sl
 80050fe:	f7fb f867 	bl	80001d0 <memchr>
 8005102:	b138      	cbz	r0, 8005114 <_svfiprintf_r+0x150>
 8005104:	9b04      	ldr	r3, [sp, #16]
 8005106:	eba0 000a 	sub.w	r0, r0, sl
 800510a:	2240      	movs	r2, #64	@ 0x40
 800510c:	4082      	lsls	r2, r0
 800510e:	4313      	orrs	r3, r2
 8005110:	3401      	adds	r4, #1
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005118:	4824      	ldr	r0, [pc, #144]	@ (80051ac <_svfiprintf_r+0x1e8>)
 800511a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800511e:	2206      	movs	r2, #6
 8005120:	f7fb f856 	bl	80001d0 <memchr>
 8005124:	2800      	cmp	r0, #0
 8005126:	d036      	beq.n	8005196 <_svfiprintf_r+0x1d2>
 8005128:	4b21      	ldr	r3, [pc, #132]	@ (80051b0 <_svfiprintf_r+0x1ec>)
 800512a:	bb1b      	cbnz	r3, 8005174 <_svfiprintf_r+0x1b0>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	3307      	adds	r3, #7
 8005130:	f023 0307 	bic.w	r3, r3, #7
 8005134:	3308      	adds	r3, #8
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800513a:	4433      	add	r3, r6
 800513c:	9309      	str	r3, [sp, #36]	@ 0x24
 800513e:	e76a      	b.n	8005016 <_svfiprintf_r+0x52>
 8005140:	fb0c 3202 	mla	r2, ip, r2, r3
 8005144:	460c      	mov	r4, r1
 8005146:	2001      	movs	r0, #1
 8005148:	e7a8      	b.n	800509c <_svfiprintf_r+0xd8>
 800514a:	2300      	movs	r3, #0
 800514c:	3401      	adds	r4, #1
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	4619      	mov	r1, r3
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	4620      	mov	r0, r4
 8005158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515c:	3a30      	subs	r2, #48	@ 0x30
 800515e:	2a09      	cmp	r2, #9
 8005160:	d903      	bls.n	800516a <_svfiprintf_r+0x1a6>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0c6      	beq.n	80050f4 <_svfiprintf_r+0x130>
 8005166:	9105      	str	r1, [sp, #20]
 8005168:	e7c4      	b.n	80050f4 <_svfiprintf_r+0x130>
 800516a:	fb0c 2101 	mla	r1, ip, r1, r2
 800516e:	4604      	mov	r4, r0
 8005170:	2301      	movs	r3, #1
 8005172:	e7f0      	b.n	8005156 <_svfiprintf_r+0x192>
 8005174:	ab03      	add	r3, sp, #12
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	462a      	mov	r2, r5
 800517a:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <_svfiprintf_r+0x1f0>)
 800517c:	a904      	add	r1, sp, #16
 800517e:	4638      	mov	r0, r7
 8005180:	f3af 8000 	nop.w
 8005184:	1c42      	adds	r2, r0, #1
 8005186:	4606      	mov	r6, r0
 8005188:	d1d6      	bne.n	8005138 <_svfiprintf_r+0x174>
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	065b      	lsls	r3, r3, #25
 800518e:	f53f af2d 	bmi.w	8004fec <_svfiprintf_r+0x28>
 8005192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005194:	e72c      	b.n	8004ff0 <_svfiprintf_r+0x2c>
 8005196:	ab03      	add	r3, sp, #12
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	462a      	mov	r2, r5
 800519c:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <_svfiprintf_r+0x1f0>)
 800519e:	a904      	add	r1, sp, #16
 80051a0:	4638      	mov	r0, r7
 80051a2:	f000 f879 	bl	8005298 <_printf_i>
 80051a6:	e7ed      	b.n	8005184 <_svfiprintf_r+0x1c0>
 80051a8:	08005608 	.word	0x08005608
 80051ac:	08005612 	.word	0x08005612
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004f0d 	.word	0x08004f0d
 80051b8:	0800560e 	.word	0x0800560e

080051bc <_printf_common>:
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	4616      	mov	r6, r2
 80051c2:	4698      	mov	r8, r3
 80051c4:	688a      	ldr	r2, [r1, #8]
 80051c6:	690b      	ldr	r3, [r1, #16]
 80051c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	bfb8      	it	lt
 80051d0:	4613      	movlt	r3, r2
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051d8:	4607      	mov	r7, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b10a      	cbz	r2, 80051e2 <_printf_common+0x26>
 80051de:	3301      	adds	r3, #1
 80051e0:	6033      	str	r3, [r6, #0]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	0699      	lsls	r1, r3, #26
 80051e6:	bf42      	ittt	mi
 80051e8:	6833      	ldrmi	r3, [r6, #0]
 80051ea:	3302      	addmi	r3, #2
 80051ec:	6033      	strmi	r3, [r6, #0]
 80051ee:	6825      	ldr	r5, [r4, #0]
 80051f0:	f015 0506 	ands.w	r5, r5, #6
 80051f4:	d106      	bne.n	8005204 <_printf_common+0x48>
 80051f6:	f104 0a19 	add.w	sl, r4, #25
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	6832      	ldr	r2, [r6, #0]
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	42ab      	cmp	r3, r5
 8005202:	dc26      	bgt.n	8005252 <_printf_common+0x96>
 8005204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	3b00      	subs	r3, #0
 800520c:	bf18      	it	ne
 800520e:	2301      	movne	r3, #1
 8005210:	0692      	lsls	r2, r2, #26
 8005212:	d42b      	bmi.n	800526c <_printf_common+0xb0>
 8005214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005218:	4641      	mov	r1, r8
 800521a:	4638      	mov	r0, r7
 800521c:	47c8      	blx	r9
 800521e:	3001      	adds	r0, #1
 8005220:	d01e      	beq.n	8005260 <_printf_common+0xa4>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	6922      	ldr	r2, [r4, #16]
 8005226:	f003 0306 	and.w	r3, r3, #6
 800522a:	2b04      	cmp	r3, #4
 800522c:	bf02      	ittt	eq
 800522e:	68e5      	ldreq	r5, [r4, #12]
 8005230:	6833      	ldreq	r3, [r6, #0]
 8005232:	1aed      	subeq	r5, r5, r3
 8005234:	68a3      	ldr	r3, [r4, #8]
 8005236:	bf0c      	ite	eq
 8005238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800523c:	2500      	movne	r5, #0
 800523e:	4293      	cmp	r3, r2
 8005240:	bfc4      	itt	gt
 8005242:	1a9b      	subgt	r3, r3, r2
 8005244:	18ed      	addgt	r5, r5, r3
 8005246:	2600      	movs	r6, #0
 8005248:	341a      	adds	r4, #26
 800524a:	42b5      	cmp	r5, r6
 800524c:	d11a      	bne.n	8005284 <_printf_common+0xc8>
 800524e:	2000      	movs	r0, #0
 8005250:	e008      	b.n	8005264 <_printf_common+0xa8>
 8005252:	2301      	movs	r3, #1
 8005254:	4652      	mov	r2, sl
 8005256:	4641      	mov	r1, r8
 8005258:	4638      	mov	r0, r7
 800525a:	47c8      	blx	r9
 800525c:	3001      	adds	r0, #1
 800525e:	d103      	bne.n	8005268 <_printf_common+0xac>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	3501      	adds	r5, #1
 800526a:	e7c6      	b.n	80051fa <_printf_common+0x3e>
 800526c:	18e1      	adds	r1, r4, r3
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	2030      	movs	r0, #48	@ 0x30
 8005272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005276:	4422      	add	r2, r4
 8005278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800527c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005280:	3302      	adds	r3, #2
 8005282:	e7c7      	b.n	8005214 <_printf_common+0x58>
 8005284:	2301      	movs	r3, #1
 8005286:	4622      	mov	r2, r4
 8005288:	4641      	mov	r1, r8
 800528a:	4638      	mov	r0, r7
 800528c:	47c8      	blx	r9
 800528e:	3001      	adds	r0, #1
 8005290:	d0e6      	beq.n	8005260 <_printf_common+0xa4>
 8005292:	3601      	adds	r6, #1
 8005294:	e7d9      	b.n	800524a <_printf_common+0x8e>
	...

08005298 <_printf_i>:
 8005298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	7e0f      	ldrb	r7, [r1, #24]
 800529e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052a0:	2f78      	cmp	r7, #120	@ 0x78
 80052a2:	4691      	mov	r9, r2
 80052a4:	4680      	mov	r8, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	469a      	mov	sl, r3
 80052aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052ae:	d807      	bhi.n	80052c0 <_printf_i+0x28>
 80052b0:	2f62      	cmp	r7, #98	@ 0x62
 80052b2:	d80a      	bhi.n	80052ca <_printf_i+0x32>
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	f000 80d1 	beq.w	800545c <_printf_i+0x1c4>
 80052ba:	2f58      	cmp	r7, #88	@ 0x58
 80052bc:	f000 80b8 	beq.w	8005430 <_printf_i+0x198>
 80052c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052c8:	e03a      	b.n	8005340 <_printf_i+0xa8>
 80052ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052ce:	2b15      	cmp	r3, #21
 80052d0:	d8f6      	bhi.n	80052c0 <_printf_i+0x28>
 80052d2:	a101      	add	r1, pc, #4	@ (adr r1, 80052d8 <_printf_i+0x40>)
 80052d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d8:	08005331 	.word	0x08005331
 80052dc:	08005345 	.word	0x08005345
 80052e0:	080052c1 	.word	0x080052c1
 80052e4:	080052c1 	.word	0x080052c1
 80052e8:	080052c1 	.word	0x080052c1
 80052ec:	080052c1 	.word	0x080052c1
 80052f0:	08005345 	.word	0x08005345
 80052f4:	080052c1 	.word	0x080052c1
 80052f8:	080052c1 	.word	0x080052c1
 80052fc:	080052c1 	.word	0x080052c1
 8005300:	080052c1 	.word	0x080052c1
 8005304:	08005443 	.word	0x08005443
 8005308:	0800536f 	.word	0x0800536f
 800530c:	080053fd 	.word	0x080053fd
 8005310:	080052c1 	.word	0x080052c1
 8005314:	080052c1 	.word	0x080052c1
 8005318:	08005465 	.word	0x08005465
 800531c:	080052c1 	.word	0x080052c1
 8005320:	0800536f 	.word	0x0800536f
 8005324:	080052c1 	.word	0x080052c1
 8005328:	080052c1 	.word	0x080052c1
 800532c:	08005405 	.word	0x08005405
 8005330:	6833      	ldr	r3, [r6, #0]
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6032      	str	r2, [r6, #0]
 8005338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800533c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005340:	2301      	movs	r3, #1
 8005342:	e09c      	b.n	800547e <_printf_i+0x1e6>
 8005344:	6833      	ldr	r3, [r6, #0]
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	6031      	str	r1, [r6, #0]
 800534c:	0606      	lsls	r6, r0, #24
 800534e:	d501      	bpl.n	8005354 <_printf_i+0xbc>
 8005350:	681d      	ldr	r5, [r3, #0]
 8005352:	e003      	b.n	800535c <_printf_i+0xc4>
 8005354:	0645      	lsls	r5, r0, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0xb8>
 8005358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800535c:	2d00      	cmp	r5, #0
 800535e:	da03      	bge.n	8005368 <_printf_i+0xd0>
 8005360:	232d      	movs	r3, #45	@ 0x2d
 8005362:	426d      	negs	r5, r5
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005368:	4858      	ldr	r0, [pc, #352]	@ (80054cc <_printf_i+0x234>)
 800536a:	230a      	movs	r3, #10
 800536c:	e011      	b.n	8005392 <_printf_i+0xfa>
 800536e:	6821      	ldr	r1, [r4, #0]
 8005370:	6833      	ldr	r3, [r6, #0]
 8005372:	0608      	lsls	r0, r1, #24
 8005374:	f853 5b04 	ldr.w	r5, [r3], #4
 8005378:	d402      	bmi.n	8005380 <_printf_i+0xe8>
 800537a:	0649      	lsls	r1, r1, #25
 800537c:	bf48      	it	mi
 800537e:	b2ad      	uxthmi	r5, r5
 8005380:	2f6f      	cmp	r7, #111	@ 0x6f
 8005382:	4852      	ldr	r0, [pc, #328]	@ (80054cc <_printf_i+0x234>)
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	bf14      	ite	ne
 8005388:	230a      	movne	r3, #10
 800538a:	2308      	moveq	r3, #8
 800538c:	2100      	movs	r1, #0
 800538e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005392:	6866      	ldr	r6, [r4, #4]
 8005394:	60a6      	str	r6, [r4, #8]
 8005396:	2e00      	cmp	r6, #0
 8005398:	db05      	blt.n	80053a6 <_printf_i+0x10e>
 800539a:	6821      	ldr	r1, [r4, #0]
 800539c:	432e      	orrs	r6, r5
 800539e:	f021 0104 	bic.w	r1, r1, #4
 80053a2:	6021      	str	r1, [r4, #0]
 80053a4:	d04b      	beq.n	800543e <_printf_i+0x1a6>
 80053a6:	4616      	mov	r6, r2
 80053a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053ac:	fb03 5711 	mls	r7, r3, r1, r5
 80053b0:	5dc7      	ldrb	r7, [r0, r7]
 80053b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b6:	462f      	mov	r7, r5
 80053b8:	42bb      	cmp	r3, r7
 80053ba:	460d      	mov	r5, r1
 80053bc:	d9f4      	bls.n	80053a8 <_printf_i+0x110>
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d10b      	bne.n	80053da <_printf_i+0x142>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	07df      	lsls	r7, r3, #31
 80053c6:	d508      	bpl.n	80053da <_printf_i+0x142>
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	6861      	ldr	r1, [r4, #4]
 80053cc:	4299      	cmp	r1, r3
 80053ce:	bfde      	ittt	le
 80053d0:	2330      	movle	r3, #48	@ 0x30
 80053d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053da:	1b92      	subs	r2, r2, r6
 80053dc:	6122      	str	r2, [r4, #16]
 80053de:	f8cd a000 	str.w	sl, [sp]
 80053e2:	464b      	mov	r3, r9
 80053e4:	aa03      	add	r2, sp, #12
 80053e6:	4621      	mov	r1, r4
 80053e8:	4640      	mov	r0, r8
 80053ea:	f7ff fee7 	bl	80051bc <_printf_common>
 80053ee:	3001      	adds	r0, #1
 80053f0:	d14a      	bne.n	8005488 <_printf_i+0x1f0>
 80053f2:	f04f 30ff 	mov.w	r0, #4294967295
 80053f6:	b004      	add	sp, #16
 80053f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	f043 0320 	orr.w	r3, r3, #32
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	4832      	ldr	r0, [pc, #200]	@ (80054d0 <_printf_i+0x238>)
 8005406:	2778      	movs	r7, #120	@ 0x78
 8005408:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	6831      	ldr	r1, [r6, #0]
 8005410:	061f      	lsls	r7, r3, #24
 8005412:	f851 5b04 	ldr.w	r5, [r1], #4
 8005416:	d402      	bmi.n	800541e <_printf_i+0x186>
 8005418:	065f      	lsls	r7, r3, #25
 800541a:	bf48      	it	mi
 800541c:	b2ad      	uxthmi	r5, r5
 800541e:	6031      	str	r1, [r6, #0]
 8005420:	07d9      	lsls	r1, r3, #31
 8005422:	bf44      	itt	mi
 8005424:	f043 0320 	orrmi.w	r3, r3, #32
 8005428:	6023      	strmi	r3, [r4, #0]
 800542a:	b11d      	cbz	r5, 8005434 <_printf_i+0x19c>
 800542c:	2310      	movs	r3, #16
 800542e:	e7ad      	b.n	800538c <_printf_i+0xf4>
 8005430:	4826      	ldr	r0, [pc, #152]	@ (80054cc <_printf_i+0x234>)
 8005432:	e7e9      	b.n	8005408 <_printf_i+0x170>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	f023 0320 	bic.w	r3, r3, #32
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	e7f6      	b.n	800542c <_printf_i+0x194>
 800543e:	4616      	mov	r6, r2
 8005440:	e7bd      	b.n	80053be <_printf_i+0x126>
 8005442:	6833      	ldr	r3, [r6, #0]
 8005444:	6825      	ldr	r5, [r4, #0]
 8005446:	6961      	ldr	r1, [r4, #20]
 8005448:	1d18      	adds	r0, r3, #4
 800544a:	6030      	str	r0, [r6, #0]
 800544c:	062e      	lsls	r6, r5, #24
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	d501      	bpl.n	8005456 <_printf_i+0x1be>
 8005452:	6019      	str	r1, [r3, #0]
 8005454:	e002      	b.n	800545c <_printf_i+0x1c4>
 8005456:	0668      	lsls	r0, r5, #25
 8005458:	d5fb      	bpl.n	8005452 <_printf_i+0x1ba>
 800545a:	8019      	strh	r1, [r3, #0]
 800545c:	2300      	movs	r3, #0
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	4616      	mov	r6, r2
 8005462:	e7bc      	b.n	80053de <_printf_i+0x146>
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	6032      	str	r2, [r6, #0]
 800546a:	681e      	ldr	r6, [r3, #0]
 800546c:	6862      	ldr	r2, [r4, #4]
 800546e:	2100      	movs	r1, #0
 8005470:	4630      	mov	r0, r6
 8005472:	f7fa fead 	bl	80001d0 <memchr>
 8005476:	b108      	cbz	r0, 800547c <_printf_i+0x1e4>
 8005478:	1b80      	subs	r0, r0, r6
 800547a:	6060      	str	r0, [r4, #4]
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	2300      	movs	r3, #0
 8005482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005486:	e7aa      	b.n	80053de <_printf_i+0x146>
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	4632      	mov	r2, r6
 800548c:	4649      	mov	r1, r9
 800548e:	4640      	mov	r0, r8
 8005490:	47d0      	blx	sl
 8005492:	3001      	adds	r0, #1
 8005494:	d0ad      	beq.n	80053f2 <_printf_i+0x15a>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	079b      	lsls	r3, r3, #30
 800549a:	d413      	bmi.n	80054c4 <_printf_i+0x22c>
 800549c:	68e0      	ldr	r0, [r4, #12]
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	4298      	cmp	r0, r3
 80054a2:	bfb8      	it	lt
 80054a4:	4618      	movlt	r0, r3
 80054a6:	e7a6      	b.n	80053f6 <_printf_i+0x15e>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4632      	mov	r2, r6
 80054ac:	4649      	mov	r1, r9
 80054ae:	4640      	mov	r0, r8
 80054b0:	47d0      	blx	sl
 80054b2:	3001      	adds	r0, #1
 80054b4:	d09d      	beq.n	80053f2 <_printf_i+0x15a>
 80054b6:	3501      	adds	r5, #1
 80054b8:	68e3      	ldr	r3, [r4, #12]
 80054ba:	9903      	ldr	r1, [sp, #12]
 80054bc:	1a5b      	subs	r3, r3, r1
 80054be:	42ab      	cmp	r3, r5
 80054c0:	dcf2      	bgt.n	80054a8 <_printf_i+0x210>
 80054c2:	e7eb      	b.n	800549c <_printf_i+0x204>
 80054c4:	2500      	movs	r5, #0
 80054c6:	f104 0619 	add.w	r6, r4, #25
 80054ca:	e7f5      	b.n	80054b8 <_printf_i+0x220>
 80054cc:	08005619 	.word	0x08005619
 80054d0:	0800562a 	.word	0x0800562a

080054d4 <memmove>:
 80054d4:	4288      	cmp	r0, r1
 80054d6:	b510      	push	{r4, lr}
 80054d8:	eb01 0402 	add.w	r4, r1, r2
 80054dc:	d902      	bls.n	80054e4 <memmove+0x10>
 80054de:	4284      	cmp	r4, r0
 80054e0:	4623      	mov	r3, r4
 80054e2:	d807      	bhi.n	80054f4 <memmove+0x20>
 80054e4:	1e43      	subs	r3, r0, #1
 80054e6:	42a1      	cmp	r1, r4
 80054e8:	d008      	beq.n	80054fc <memmove+0x28>
 80054ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054f2:	e7f8      	b.n	80054e6 <memmove+0x12>
 80054f4:	4402      	add	r2, r0
 80054f6:	4601      	mov	r1, r0
 80054f8:	428a      	cmp	r2, r1
 80054fa:	d100      	bne.n	80054fe <memmove+0x2a>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005506:	e7f7      	b.n	80054f8 <memmove+0x24>

08005508 <_sbrk_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d06      	ldr	r5, [pc, #24]	@ (8005524 <_sbrk_r+0x1c>)
 800550c:	2300      	movs	r3, #0
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f7fb ffae 	bl	8001474 <_sbrk>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_sbrk_r+0x1a>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_sbrk_r+0x1a>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20001350 	.word	0x20001350

08005528 <memcpy>:
 8005528:	440a      	add	r2, r1
 800552a:	4291      	cmp	r1, r2
 800552c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005530:	d100      	bne.n	8005534 <memcpy+0xc>
 8005532:	4770      	bx	lr
 8005534:	b510      	push	{r4, lr}
 8005536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800553a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800553e:	4291      	cmp	r1, r2
 8005540:	d1f9      	bne.n	8005536 <memcpy+0xe>
 8005542:	bd10      	pop	{r4, pc}

08005544 <_realloc_r>:
 8005544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005548:	4607      	mov	r7, r0
 800554a:	4614      	mov	r4, r2
 800554c:	460d      	mov	r5, r1
 800554e:	b921      	cbnz	r1, 800555a <_realloc_r+0x16>
 8005550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	4611      	mov	r1, r2
 8005556:	f7ff bc4d 	b.w	8004df4 <_malloc_r>
 800555a:	b92a      	cbnz	r2, 8005568 <_realloc_r+0x24>
 800555c:	f7ff fbde 	bl	8004d1c <_free_r>
 8005560:	4625      	mov	r5, r4
 8005562:	4628      	mov	r0, r5
 8005564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005568:	f000 f81a 	bl	80055a0 <_malloc_usable_size_r>
 800556c:	4284      	cmp	r4, r0
 800556e:	4606      	mov	r6, r0
 8005570:	d802      	bhi.n	8005578 <_realloc_r+0x34>
 8005572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005576:	d8f4      	bhi.n	8005562 <_realloc_r+0x1e>
 8005578:	4621      	mov	r1, r4
 800557a:	4638      	mov	r0, r7
 800557c:	f7ff fc3a 	bl	8004df4 <_malloc_r>
 8005580:	4680      	mov	r8, r0
 8005582:	b908      	cbnz	r0, 8005588 <_realloc_r+0x44>
 8005584:	4645      	mov	r5, r8
 8005586:	e7ec      	b.n	8005562 <_realloc_r+0x1e>
 8005588:	42b4      	cmp	r4, r6
 800558a:	4622      	mov	r2, r4
 800558c:	4629      	mov	r1, r5
 800558e:	bf28      	it	cs
 8005590:	4632      	movcs	r2, r6
 8005592:	f7ff ffc9 	bl	8005528 <memcpy>
 8005596:	4629      	mov	r1, r5
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff fbbf 	bl	8004d1c <_free_r>
 800559e:	e7f1      	b.n	8005584 <_realloc_r+0x40>

080055a0 <_malloc_usable_size_r>:
 80055a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a4:	1f18      	subs	r0, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfbc      	itt	lt
 80055aa:	580b      	ldrlt	r3, [r1, r0]
 80055ac:	18c0      	addlt	r0, r0, r3
 80055ae:	4770      	bx	lr

080055b0 <_init>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr

080055bc <_fini>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr
